(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{597:function(n,s,e){"use strict";e.r(s);var a=e(15),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),e("p",[n._v("二叉查找树(Binary Search Tree)，又被称为二叉搜索树。\n它是特殊的二叉树：对于二叉树，假设x为二叉树中的任意一个结点，x节点包含关键字key，节点x的key值记为key[x]。如果y是x的左子树中的一个结点，则key[y] <= key[x]；如果y是x的右子树的一个结点，则key[y] >= key[x]。那么，这棵树就是二叉查找树.")]),n._v(" "),e("blockquote",[e("p",[n._v("具体讲解见 https://www.cnblogs.com/skywang12345/p/3576373.html")])]),n._v(" "),e("p",[n._v("需要注意的是插入删除")]),n._v(" "),e("p",[n._v("这里说一下链表实现。")]),n._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('#pragma once\n#include <iostream>\n#include <iomanip>\n\nusing namespace std;\ntemplate <typename T>\nclass BSTNode {\npublic:\n    T key;\n    BSTNode* parent = nullptr;\n    BSTNode* left = nullptr;\n    BSTNode* right = nullptr;\n    BSTNode(T value) : key(value) {}\n    ~BSTNode() {\n        cout << "delete : " << key << endl;\n    }\n};\n\ntemplate <typename T>\nclass BSTTree {\npublic:\n    BSTTree();\n    ~BSTTree();\n\n    // 三序遍历\n    void preOrder();\n    void inOrder();\n    void postOrder();\n\n    // (递归实现)查找"二叉树"中键值为key的节点\n    BSTNode<T>* search(T key);\n    // (非递归实现)查找"二叉树"中键值为key的节点\n    BSTNode<T>* iterativeSearch(T key);\n    // 查找最小结点：返回最小结点的键值。\n    T minimum();\n    // 查找最大结点：返回最大结点的键值。\n    T maximum();\n\n    // 找结点(x)的后继结点。即，查找"二叉树中数据值大于该结点"的"最小结点"。\n    BSTNode<T>* successor(BSTNode<T>* x);\n    // 找结点(x)的前驱结点。即，查找"二叉树中数据值小于该结点"的"最大结点"。\n    BSTNode<T>* predecessor(BSTNode<T>* x);\n\n    // 将结点(key为节点键值)插入到二叉树中\n    void insert(T key);\n\n    // 删除结点(key为节点键值)\n    void remove(T key);\n\n    // 销毁二叉树\n    void destroy();\n\n    // 打印二叉树\n    void print();\n    \nprivate:\n    // 前序遍历"二叉树"\n    void preOrder(BSTNode<T>* tree) const;\n    // 中序遍历"二叉树"\n    void inOrder(BSTNode<T>* tree) const;\n    // 后序遍历"二叉树"\n    void postOrder(BSTNode<T>* tree) const;\n\n    // (递归实现)查找"二叉树x"中键值为key的节点\n    BSTNode<T>* search(BSTNode<T>* x, T key) const;\n    // (非递归实现)查找"二叉树x"中键值为key的节点\n    BSTNode<T>* iterativeSearch(BSTNode<T>* x, T key) const;\n\n    // 查找最小结点：返回tree为根结点的二叉树的最小结点。\n    BSTNode<T>* minimum(BSTNode<T>* tree);\n    // 查找最大结点：返回tree为根结点的二叉树的最大结点。\n    BSTNode<T>* maximum(BSTNode<T>* tree);\n    // 将结点(z)插入到二叉树(tree)中\n    void insert(BSTNode<T>*& tree, BSTNode<T>* z);\n    // 删除二叉树(tree)中的结点(z)，并返回被删除的结点\n    BSTNode<T>* remove(BSTNode<T>*& tree, BSTNode<T>* z);\n    // 销毁二叉树\n    void destroy(BSTNode<T>*& tree);\n    // 打印二叉树\n    void print(BSTNode<T>* tree, T key, int direction);\n\n    BSTNode<T>* mRoot = nullptr;\n};\n\ntemplate<typename T>\ninline BSTTree<T>::BSTTree()\n{\n}\n\ntemplate<typename T>\ninline BSTTree<T>::~BSTTree()\n{\n    destroy();\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::insert(T value)\n{\n    BSTNode<T>* node = new BSTNode<T>(value);\n    if (node == nullptr) {\n        return;\n    }\n    insert(mRoot, node);\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::remove(T key)\n{\n    BSTNode<T>* z;\n    BSTNode<T>* node;\n    z = search(mRoot, key);\n    if (z) {\n        node = remove(mRoot, z);\n        if (node) {\n            delete node;\n        }\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::destroy()\n{\n    if (mRoot) {\n        destroy(mRoot);\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::print()\n{\n    if (mRoot) {\n        print(mRoot, mRoot->key, 0);\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::preOrder(BSTNode<T>* tree) const\n{\n    if (tree) {\n        cout << tree->key << " ";\n        preOrder(tree->left);\n        preOrder(tree->right);\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::inOrder(BSTNode<T>* tree) const\n{\n    if (tree) {\n        inOrder(tree->left);\n        cout << tree->key << " ";\n        inOrder(tree->right);\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::postOrder(BSTNode<T>* tree) const\n{\n    if (tree) {\n        postOrder(tree->left);\n        postOrder(tree->right);\n        cout << tree->key << " ";\n    }\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::preOrder()\n{\n    preOrder(mRoot);\n    cout << endl;\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::inOrder()\n{\n    inOrder(mRoot);\n    cout << endl;\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::postOrder()\n{\n    postOrder(mRoot);\n    cout << endl;\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::search(T key)\n{\n    return search(mRoot, key);\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::iterativeSearch(T key)\n{\n    return iterativeSearch(mRoot, key);\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::search(BSTNode<T>* x, T key) const\n{\n    if (x == nullptr || x->key == key) {\n        return x;\n    }\n    if (key < x->key) {\n        return search(x->left, key);\n    }\n    else {\n        return search(x->right, key);\n    }\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::iterativeSearch(BSTNode<T>* x, T key) const\n{\n    while (x != nullptr && x->key != key) {\n        if (key < x->key) {\n            x = x->left;\n        }\n        else {\n            x = x->right;\n        }\n    }\n    return x;\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::minimum(BSTNode<T>* tree)\n{\n    if (tree == nullptr) {\n        return nullptr;\n    }\n    while (tree->left) {\n        tree = tree->left;\n    }\n    return tree;\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::maximum(BSTNode<T>* tree)\n{\n    if (tree == nullptr) {\n        return nullptr;\n    }\n    while (tree->right) {\n        tree = tree->right;\n    }\n    return tree;\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::insert(BSTNode<T>*& tree, BSTNode<T>* z)\n{\n    BSTNode<T>* y = nullptr;\n    BSTNode<T>* x = tree;\n    while (x) {\n        y = x;\n        if (z->key < x->key) {\n            x = x->left;\n        }\n        else {\n            x = x->right;\n        }\n    }\n\n    z->parent = y;\n    if (y == nullptr) {\n        tree = z;\n    }\n    else if (z->key < y->key) {\n        y->left = z;\n    }\n    else {\n        y->right = z;\n    }\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::remove(BSTNode<T>*& tree, BSTNode<T>* z)\n{\n    BSTNode<T>* x = nullptr;\n    BSTNode<T>* y = nullptr;\n    if ((z->left == nullptr) || (z->right == nullptr)) {\n        y = z;\n    }\n    else {\n        y = successor(z);\n    }\n\n    if (y->left) {\n        x = y->left;\n    }\n    else {\n        x = y->right;\n    }\n\n    if (x) {\n        x->parent = y->parent;\n    }\n\n    if (y->parent == nullptr) {\n        tree = x;\n    }\n    else if (y == y->parent->left) {\n        y->parent->left = x;\n    }\n    else {\n        y->parent->right = x;\n    }\n\n    if (y != z) {\n        z->key = y->key;\n    }\n    return y;\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::destroy(BSTNode<T>*& tree)\n{\n    if (tree == nullptr) {\n        return;\n    }\n    if (tree->left) {\n        destroy(tree->left);\n    }\n\n    if (tree->right) {\n        destroy(tree->right);\n    }\n\n    delete tree;\n    tree = nullptr;\n}\n\ntemplate<typename T>\ninline void BSTTree<T>::print(BSTNode<T>* tree, T key, int direction)\n{\n    if (tree != nullptr)\n    {\n        if (direction == 0)    // tree是根节点\n            cout << setw(2) << tree->key << " is root" << endl;\n        else                // tree是分支节点\n            cout << setw(2) << tree->key << " is " << setw(2) << key << "\'s " << setw(12) << (direction == 1 ? "right child" : "left child") << endl;\n\n        print(tree->left, tree->key, -1);\n        print(tree->right, tree->key, 1);\n    }\n}\n\ntemplate<typename T>\ninline T BSTTree<T>::minimum()\n{\n    BSTNode<T>* min = minimum(mRoot);\n    if (min) {\n        return min->key;\n    }\n    return T();\n}\n\ntemplate<typename T>\ninline T BSTTree<T>::maximum()\n{\n    BSTNode<T>* max = maximum(mRoot);\n    if (max) {\n        return max->key;\n    }\n    return T();\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::successor(BSTNode<T>* x)\n{\n    // 如果x存在左孩子，则"x的前驱结点"为 "以其左孩子为根的子树的最大结点"。\n    if (x->left) {\n        return maximum(x->left);\n    }\n    // 如果x没有左孩子。则x有以下两种可能：\n    // (01) x是"一个右孩子"，则"x的前驱结点"为 "它的父结点"。\n    // (02) x是"一个左孩子"，则查找"x的最低的父结点，并且该父结点要具有右孩子"，找到的这个"最低的父结点"就是"x的前驱结点"\n    BSTNode<T>* node = x->parent;\n    while (node && x == node->left) {\n        x = node;\n        node = node->parent;\n    }\n    return node;\n}\n\ntemplate<typename T>\ninline BSTNode<T>* BSTTree<T>::predecessor(BSTNode<T>* x)\n{\n    // 如果x存在右孩子，则"x的后继结点"为 "以其右孩子为根的子树的最小结点"。\n    if (x->right != nullptr) {\n        return minimum(x->right);\n    }\n    // 如果x没有右孩子。则x有以下两种可能：\n    // (01) x是"一个左孩子"，则"x的后继结点"为 "它的父结点"。\n    // (02) x是"一个右孩子"，则查找"x的最低的父结点，并且该父结点要具有左孩子"，找到的这个"最低的父结点"就是"x的后继结点"。\n    BSTNode<T>* node = x->parent;\n    while (node && node->right == x) {\n        x = node;\n        node = node->parent;\n    }\n    return node;\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br"),e("span",{staticClass:"line-number"},[n._v("86")]),e("br"),e("span",{staticClass:"line-number"},[n._v("87")]),e("br"),e("span",{staticClass:"line-number"},[n._v("88")]),e("br"),e("span",{staticClass:"line-number"},[n._v("89")]),e("br"),e("span",{staticClass:"line-number"},[n._v("90")]),e("br"),e("span",{staticClass:"line-number"},[n._v("91")]),e("br"),e("span",{staticClass:"line-number"},[n._v("92")]),e("br"),e("span",{staticClass:"line-number"},[n._v("93")]),e("br"),e("span",{staticClass:"line-number"},[n._v("94")]),e("br"),e("span",{staticClass:"line-number"},[n._v("95")]),e("br"),e("span",{staticClass:"line-number"},[n._v("96")]),e("br"),e("span",{staticClass:"line-number"},[n._v("97")]),e("br"),e("span",{staticClass:"line-number"},[n._v("98")]),e("br"),e("span",{staticClass:"line-number"},[n._v("99")]),e("br"),e("span",{staticClass:"line-number"},[n._v("100")]),e("br"),e("span",{staticClass:"line-number"},[n._v("101")]),e("br"),e("span",{staticClass:"line-number"},[n._v("102")]),e("br"),e("span",{staticClass:"line-number"},[n._v("103")]),e("br"),e("span",{staticClass:"line-number"},[n._v("104")]),e("br"),e("span",{staticClass:"line-number"},[n._v("105")]),e("br"),e("span",{staticClass:"line-number"},[n._v("106")]),e("br"),e("span",{staticClass:"line-number"},[n._v("107")]),e("br"),e("span",{staticClass:"line-number"},[n._v("108")]),e("br"),e("span",{staticClass:"line-number"},[n._v("109")]),e("br"),e("span",{staticClass:"line-number"},[n._v("110")]),e("br"),e("span",{staticClass:"line-number"},[n._v("111")]),e("br"),e("span",{staticClass:"line-number"},[n._v("112")]),e("br"),e("span",{staticClass:"line-number"},[n._v("113")]),e("br"),e("span",{staticClass:"line-number"},[n._v("114")]),e("br"),e("span",{staticClass:"line-number"},[n._v("115")]),e("br"),e("span",{staticClass:"line-number"},[n._v("116")]),e("br"),e("span",{staticClass:"line-number"},[n._v("117")]),e("br"),e("span",{staticClass:"line-number"},[n._v("118")]),e("br"),e("span",{staticClass:"line-number"},[n._v("119")]),e("br"),e("span",{staticClass:"line-number"},[n._v("120")]),e("br"),e("span",{staticClass:"line-number"},[n._v("121")]),e("br"),e("span",{staticClass:"line-number"},[n._v("122")]),e("br"),e("span",{staticClass:"line-number"},[n._v("123")]),e("br"),e("span",{staticClass:"line-number"},[n._v("124")]),e("br"),e("span",{staticClass:"line-number"},[n._v("125")]),e("br"),e("span",{staticClass:"line-number"},[n._v("126")]),e("br"),e("span",{staticClass:"line-number"},[n._v("127")]),e("br"),e("span",{staticClass:"line-number"},[n._v("128")]),e("br"),e("span",{staticClass:"line-number"},[n._v("129")]),e("br"),e("span",{staticClass:"line-number"},[n._v("130")]),e("br"),e("span",{staticClass:"line-number"},[n._v("131")]),e("br"),e("span",{staticClass:"line-number"},[n._v("132")]),e("br"),e("span",{staticClass:"line-number"},[n._v("133")]),e("br"),e("span",{staticClass:"line-number"},[n._v("134")]),e("br"),e("span",{staticClass:"line-number"},[n._v("135")]),e("br"),e("span",{staticClass:"line-number"},[n._v("136")]),e("br"),e("span",{staticClass:"line-number"},[n._v("137")]),e("br"),e("span",{staticClass:"line-number"},[n._v("138")]),e("br"),e("span",{staticClass:"line-number"},[n._v("139")]),e("br"),e("span",{staticClass:"line-number"},[n._v("140")]),e("br"),e("span",{staticClass:"line-number"},[n._v("141")]),e("br"),e("span",{staticClass:"line-number"},[n._v("142")]),e("br"),e("span",{staticClass:"line-number"},[n._v("143")]),e("br"),e("span",{staticClass:"line-number"},[n._v("144")]),e("br"),e("span",{staticClass:"line-number"},[n._v("145")]),e("br"),e("span",{staticClass:"line-number"},[n._v("146")]),e("br"),e("span",{staticClass:"line-number"},[n._v("147")]),e("br"),e("span",{staticClass:"line-number"},[n._v("148")]),e("br"),e("span",{staticClass:"line-number"},[n._v("149")]),e("br"),e("span",{staticClass:"line-number"},[n._v("150")]),e("br"),e("span",{staticClass:"line-number"},[n._v("151")]),e("br"),e("span",{staticClass:"line-number"},[n._v("152")]),e("br"),e("span",{staticClass:"line-number"},[n._v("153")]),e("br"),e("span",{staticClass:"line-number"},[n._v("154")]),e("br"),e("span",{staticClass:"line-number"},[n._v("155")]),e("br"),e("span",{staticClass:"line-number"},[n._v("156")]),e("br"),e("span",{staticClass:"line-number"},[n._v("157")]),e("br"),e("span",{staticClass:"line-number"},[n._v("158")]),e("br"),e("span",{staticClass:"line-number"},[n._v("159")]),e("br"),e("span",{staticClass:"line-number"},[n._v("160")]),e("br"),e("span",{staticClass:"line-number"},[n._v("161")]),e("br"),e("span",{staticClass:"line-number"},[n._v("162")]),e("br"),e("span",{staticClass:"line-number"},[n._v("163")]),e("br"),e("span",{staticClass:"line-number"},[n._v("164")]),e("br"),e("span",{staticClass:"line-number"},[n._v("165")]),e("br"),e("span",{staticClass:"line-number"},[n._v("166")]),e("br"),e("span",{staticClass:"line-number"},[n._v("167")]),e("br"),e("span",{staticClass:"line-number"},[n._v("168")]),e("br"),e("span",{staticClass:"line-number"},[n._v("169")]),e("br"),e("span",{staticClass:"line-number"},[n._v("170")]),e("br"),e("span",{staticClass:"line-number"},[n._v("171")]),e("br"),e("span",{staticClass:"line-number"},[n._v("172")]),e("br"),e("span",{staticClass:"line-number"},[n._v("173")]),e("br"),e("span",{staticClass:"line-number"},[n._v("174")]),e("br"),e("span",{staticClass:"line-number"},[n._v("175")]),e("br"),e("span",{staticClass:"line-number"},[n._v("176")]),e("br"),e("span",{staticClass:"line-number"},[n._v("177")]),e("br"),e("span",{staticClass:"line-number"},[n._v("178")]),e("br"),e("span",{staticClass:"line-number"},[n._v("179")]),e("br"),e("span",{staticClass:"line-number"},[n._v("180")]),e("br"),e("span",{staticClass:"line-number"},[n._v("181")]),e("br"),e("span",{staticClass:"line-number"},[n._v("182")]),e("br"),e("span",{staticClass:"line-number"},[n._v("183")]),e("br"),e("span",{staticClass:"line-number"},[n._v("184")]),e("br"),e("span",{staticClass:"line-number"},[n._v("185")]),e("br"),e("span",{staticClass:"line-number"},[n._v("186")]),e("br"),e("span",{staticClass:"line-number"},[n._v("187")]),e("br"),e("span",{staticClass:"line-number"},[n._v("188")]),e("br"),e("span",{staticClass:"line-number"},[n._v("189")]),e("br"),e("span",{staticClass:"line-number"},[n._v("190")]),e("br"),e("span",{staticClass:"line-number"},[n._v("191")]),e("br"),e("span",{staticClass:"line-number"},[n._v("192")]),e("br"),e("span",{staticClass:"line-number"},[n._v("193")]),e("br"),e("span",{staticClass:"line-number"},[n._v("194")]),e("br"),e("span",{staticClass:"line-number"},[n._v("195")]),e("br"),e("span",{staticClass:"line-number"},[n._v("196")]),e("br"),e("span",{staticClass:"line-number"},[n._v("197")]),e("br"),e("span",{staticClass:"line-number"},[n._v("198")]),e("br"),e("span",{staticClass:"line-number"},[n._v("199")]),e("br"),e("span",{staticClass:"line-number"},[n._v("200")]),e("br"),e("span",{staticClass:"line-number"},[n._v("201")]),e("br"),e("span",{staticClass:"line-number"},[n._v("202")]),e("br"),e("span",{staticClass:"line-number"},[n._v("203")]),e("br"),e("span",{staticClass:"line-number"},[n._v("204")]),e("br"),e("span",{staticClass:"line-number"},[n._v("205")]),e("br"),e("span",{staticClass:"line-number"},[n._v("206")]),e("br"),e("span",{staticClass:"line-number"},[n._v("207")]),e("br"),e("span",{staticClass:"line-number"},[n._v("208")]),e("br"),e("span",{staticClass:"line-number"},[n._v("209")]),e("br"),e("span",{staticClass:"line-number"},[n._v("210")]),e("br"),e("span",{staticClass:"line-number"},[n._v("211")]),e("br"),e("span",{staticClass:"line-number"},[n._v("212")]),e("br"),e("span",{staticClass:"line-number"},[n._v("213")]),e("br"),e("span",{staticClass:"line-number"},[n._v("214")]),e("br"),e("span",{staticClass:"line-number"},[n._v("215")]),e("br"),e("span",{staticClass:"line-number"},[n._v("216")]),e("br"),e("span",{staticClass:"line-number"},[n._v("217")]),e("br"),e("span",{staticClass:"line-number"},[n._v("218")]),e("br"),e("span",{staticClass:"line-number"},[n._v("219")]),e("br"),e("span",{staticClass:"line-number"},[n._v("220")]),e("br"),e("span",{staticClass:"line-number"},[n._v("221")]),e("br"),e("span",{staticClass:"line-number"},[n._v("222")]),e("br"),e("span",{staticClass:"line-number"},[n._v("223")]),e("br"),e("span",{staticClass:"line-number"},[n._v("224")]),e("br"),e("span",{staticClass:"line-number"},[n._v("225")]),e("br"),e("span",{staticClass:"line-number"},[n._v("226")]),e("br"),e("span",{staticClass:"line-number"},[n._v("227")]),e("br"),e("span",{staticClass:"line-number"},[n._v("228")]),e("br"),e("span",{staticClass:"line-number"},[n._v("229")]),e("br"),e("span",{staticClass:"line-number"},[n._v("230")]),e("br"),e("span",{staticClass:"line-number"},[n._v("231")]),e("br"),e("span",{staticClass:"line-number"},[n._v("232")]),e("br"),e("span",{staticClass:"line-number"},[n._v("233")]),e("br"),e("span",{staticClass:"line-number"},[n._v("234")]),e("br"),e("span",{staticClass:"line-number"},[n._v("235")]),e("br"),e("span",{staticClass:"line-number"},[n._v("236")]),e("br"),e("span",{staticClass:"line-number"},[n._v("237")]),e("br"),e("span",{staticClass:"line-number"},[n._v("238")]),e("br"),e("span",{staticClass:"line-number"},[n._v("239")]),e("br"),e("span",{staticClass:"line-number"},[n._v("240")]),e("br"),e("span",{staticClass:"line-number"},[n._v("241")]),e("br"),e("span",{staticClass:"line-number"},[n._v("242")]),e("br"),e("span",{staticClass:"line-number"},[n._v("243")]),e("br"),e("span",{staticClass:"line-number"},[n._v("244")]),e("br"),e("span",{staticClass:"line-number"},[n._v("245")]),e("br"),e("span",{staticClass:"line-number"},[n._v("246")]),e("br"),e("span",{staticClass:"line-number"},[n._v("247")]),e("br"),e("span",{staticClass:"line-number"},[n._v("248")]),e("br"),e("span",{staticClass:"line-number"},[n._v("249")]),e("br"),e("span",{staticClass:"line-number"},[n._v("250")]),e("br"),e("span",{staticClass:"line-number"},[n._v("251")]),e("br"),e("span",{staticClass:"line-number"},[n._v("252")]),e("br"),e("span",{staticClass:"line-number"},[n._v("253")]),e("br"),e("span",{staticClass:"line-number"},[n._v("254")]),e("br"),e("span",{staticClass:"line-number"},[n._v("255")]),e("br"),e("span",{staticClass:"line-number"},[n._v("256")]),e("br"),e("span",{staticClass:"line-number"},[n._v("257")]),e("br"),e("span",{staticClass:"line-number"},[n._v("258")]),e("br"),e("span",{staticClass:"line-number"},[n._v("259")]),e("br"),e("span",{staticClass:"line-number"},[n._v("260")]),e("br"),e("span",{staticClass:"line-number"},[n._v("261")]),e("br"),e("span",{staticClass:"line-number"},[n._v("262")]),e("br"),e("span",{staticClass:"line-number"},[n._v("263")]),e("br"),e("span",{staticClass:"line-number"},[n._v("264")]),e("br"),e("span",{staticClass:"line-number"},[n._v("265")]),e("br"),e("span",{staticClass:"line-number"},[n._v("266")]),e("br"),e("span",{staticClass:"line-number"},[n._v("267")]),e("br"),e("span",{staticClass:"line-number"},[n._v("268")]),e("br"),e("span",{staticClass:"line-number"},[n._v("269")]),e("br"),e("span",{staticClass:"line-number"},[n._v("270")]),e("br"),e("span",{staticClass:"line-number"},[n._v("271")]),e("br"),e("span",{staticClass:"line-number"},[n._v("272")]),e("br"),e("span",{staticClass:"line-number"},[n._v("273")]),e("br"),e("span",{staticClass:"line-number"},[n._v("274")]),e("br"),e("span",{staticClass:"line-number"},[n._v("275")]),e("br"),e("span",{staticClass:"line-number"},[n._v("276")]),e("br"),e("span",{staticClass:"line-number"},[n._v("277")]),e("br"),e("span",{staticClass:"line-number"},[n._v("278")]),e("br"),e("span",{staticClass:"line-number"},[n._v("279")]),e("br"),e("span",{staticClass:"line-number"},[n._v("280")]),e("br"),e("span",{staticClass:"line-number"},[n._v("281")]),e("br"),e("span",{staticClass:"line-number"},[n._v("282")]),e("br"),e("span",{staticClass:"line-number"},[n._v("283")]),e("br"),e("span",{staticClass:"line-number"},[n._v("284")]),e("br"),e("span",{staticClass:"line-number"},[n._v("285")]),e("br"),e("span",{staticClass:"line-number"},[n._v("286")]),e("br"),e("span",{staticClass:"line-number"},[n._v("287")]),e("br"),e("span",{staticClass:"line-number"},[n._v("288")]),e("br"),e("span",{staticClass:"line-number"},[n._v("289")]),e("br"),e("span",{staticClass:"line-number"},[n._v("290")]),e("br"),e("span",{staticClass:"line-number"},[n._v("291")]),e("br"),e("span",{staticClass:"line-number"},[n._v("292")]),e("br"),e("span",{staticClass:"line-number"},[n._v("293")]),e("br"),e("span",{staticClass:"line-number"},[n._v("294")]),e("br"),e("span",{staticClass:"line-number"},[n._v("295")]),e("br"),e("span",{staticClass:"line-number"},[n._v("296")]),e("br"),e("span",{staticClass:"line-number"},[n._v("297")]),e("br"),e("span",{staticClass:"line-number"},[n._v("298")]),e("br"),e("span",{staticClass:"line-number"},[n._v("299")]),e("br"),e("span",{staticClass:"line-number"},[n._v("300")]),e("br"),e("span",{staticClass:"line-number"},[n._v("301")]),e("br"),e("span",{staticClass:"line-number"},[n._v("302")]),e("br"),e("span",{staticClass:"line-number"},[n._v("303")]),e("br"),e("span",{staticClass:"line-number"},[n._v("304")]),e("br"),e("span",{staticClass:"line-number"},[n._v("305")]),e("br"),e("span",{staticClass:"line-number"},[n._v("306")]),e("br"),e("span",{staticClass:"line-number"},[n._v("307")]),e("br"),e("span",{staticClass:"line-number"},[n._v("308")]),e("br"),e("span",{staticClass:"line-number"},[n._v("309")]),e("br"),e("span",{staticClass:"line-number"},[n._v("310")]),e("br"),e("span",{staticClass:"line-number"},[n._v("311")]),e("br"),e("span",{staticClass:"line-number"},[n._v("312")]),e("br"),e("span",{staticClass:"line-number"},[n._v("313")]),e("br"),e("span",{staticClass:"line-number"},[n._v("314")]),e("br"),e("span",{staticClass:"line-number"},[n._v("315")]),e("br"),e("span",{staticClass:"line-number"},[n._v("316")]),e("br"),e("span",{staticClass:"line-number"},[n._v("317")]),e("br"),e("span",{staticClass:"line-number"},[n._v("318")]),e("br"),e("span",{staticClass:"line-number"},[n._v("319")]),e("br"),e("span",{staticClass:"line-number"},[n._v("320")]),e("br"),e("span",{staticClass:"line-number"},[n._v("321")]),e("br"),e("span",{staticClass:"line-number"},[n._v("322")]),e("br"),e("span",{staticClass:"line-number"},[n._v("323")]),e("br"),e("span",{staticClass:"line-number"},[n._v("324")]),e("br"),e("span",{staticClass:"line-number"},[n._v("325")]),e("br"),e("span",{staticClass:"line-number"},[n._v("326")]),e("br"),e("span",{staticClass:"line-number"},[n._v("327")]),e("br"),e("span",{staticClass:"line-number"},[n._v("328")]),e("br"),e("span",{staticClass:"line-number"},[n._v("329")]),e("br"),e("span",{staticClass:"line-number"},[n._v("330")]),e("br"),e("span",{staticClass:"line-number"},[n._v("331")]),e("br"),e("span",{staticClass:"line-number"},[n._v("332")]),e("br"),e("span",{staticClass:"line-number"},[n._v("333")]),e("br"),e("span",{staticClass:"line-number"},[n._v("334")]),e("br"),e("span",{staticClass:"line-number"},[n._v("335")]),e("br"),e("span",{staticClass:"line-number"},[n._v("336")]),e("br"),e("span",{staticClass:"line-number"},[n._v("337")]),e("br"),e("span",{staticClass:"line-number"},[n._v("338")]),e("br"),e("span",{staticClass:"line-number"},[n._v("339")]),e("br"),e("span",{staticClass:"line-number"},[n._v("340")]),e("br"),e("span",{staticClass:"line-number"},[n._v("341")]),e("br"),e("span",{staticClass:"line-number"},[n._v("342")]),e("br"),e("span",{staticClass:"line-number"},[n._v("343")]),e("br"),e("span",{staticClass:"line-number"},[n._v("344")]),e("br"),e("span",{staticClass:"line-number"},[n._v("345")]),e("br"),e("span",{staticClass:"line-number"},[n._v("346")]),e("br"),e("span",{staticClass:"line-number"},[n._v("347")]),e("br"),e("span",{staticClass:"line-number"},[n._v("348")]),e("br"),e("span",{staticClass:"line-number"},[n._v("349")]),e("br"),e("span",{staticClass:"line-number"},[n._v("350")]),e("br"),e("span",{staticClass:"line-number"},[n._v("351")]),e("br"),e("span",{staticClass:"line-number"},[n._v("352")]),e("br"),e("span",{staticClass:"line-number"},[n._v("353")]),e("br"),e("span",{staticClass:"line-number"},[n._v("354")]),e("br"),e("span",{staticClass:"line-number"},[n._v("355")]),e("br"),e("span",{staticClass:"line-number"},[n._v("356")]),e("br"),e("span",{staticClass:"line-number"},[n._v("357")]),e("br"),e("span",{staticClass:"line-number"},[n._v("358")]),e("br"),e("span",{staticClass:"line-number"},[n._v("359")]),e("br"),e("span",{staticClass:"line-number"},[n._v("360")]),e("br"),e("span",{staticClass:"line-number"},[n._v("361")]),e("br"),e("span",{staticClass:"line-number"},[n._v("362")]),e("br"),e("span",{staticClass:"line-number"},[n._v("363")]),e("br"),e("span",{staticClass:"line-number"},[n._v("364")]),e("br"),e("span",{staticClass:"line-number"},[n._v("365")]),e("br"),e("span",{staticClass:"line-number"},[n._v("366")]),e("br"),e("span",{staticClass:"line-number"},[n._v("367")]),e("br"),e("span",{staticClass:"line-number"},[n._v("368")]),e("br"),e("span",{staticClass:"line-number"},[n._v("369")]),e("br"),e("span",{staticClass:"line-number"},[n._v("370")]),e("br"),e("span",{staticClass:"line-number"},[n._v("371")]),e("br"),e("span",{staticClass:"line-number"},[n._v("372")]),e("br"),e("span",{staticClass:"line-number"},[n._v("373")]),e("br"),e("span",{staticClass:"line-number"},[n._v("374")]),e("br"),e("span",{staticClass:"line-number"},[n._v("375")]),e("br"),e("span",{staticClass:"line-number"},[n._v("376")]),e("br"),e("span",{staticClass:"line-number"},[n._v("377")]),e("br"),e("span",{staticClass:"line-number"},[n._v("378")]),e("br"),e("span",{staticClass:"line-number"},[n._v("379")]),e("br"),e("span",{staticClass:"line-number"},[n._v("380")]),e("br"),e("span",{staticClass:"line-number"},[n._v("381")]),e("br"),e("span",{staticClass:"line-number"},[n._v("382")]),e("br"),e("span",{staticClass:"line-number"},[n._v("383")]),e("br"),e("span",{staticClass:"line-number"},[n._v("384")]),e("br"),e("span",{staticClass:"line-number"},[n._v("385")]),e("br"),e("span",{staticClass:"line-number"},[n._v("386")]),e("br"),e("span",{staticClass:"line-number"},[n._v("387")]),e("br"),e("span",{staticClass:"line-number"},[n._v("388")]),e("br"),e("span",{staticClass:"line-number"},[n._v("389")]),e("br"),e("span",{staticClass:"line-number"},[n._v("390")]),e("br"),e("span",{staticClass:"line-number"},[n._v("391")]),e("br"),e("span",{staticClass:"line-number"},[n._v("392")]),e("br"),e("span",{staticClass:"line-number"},[n._v("393")]),e("br"),e("span",{staticClass:"line-number"},[n._v("394")]),e("br"),e("span",{staticClass:"line-number"},[n._v("395")]),e("br"),e("span",{staticClass:"line-number"},[n._v("396")]),e("br"),e("span",{staticClass:"line-number"},[n._v("397")]),e("br"),e("span",{staticClass:"line-number"},[n._v("398")]),e("br"),e("span",{staticClass:"line-number"},[n._v("399")]),e("br"),e("span",{staticClass:"line-number"},[n._v("400")]),e("br"),e("span",{staticClass:"line-number"},[n._v("401")]),e("br"),e("span",{staticClass:"line-number"},[n._v("402")]),e("br"),e("span",{staticClass:"line-number"},[n._v("403")]),e("br"),e("span",{staticClass:"line-number"},[n._v("404")]),e("br"),e("span",{staticClass:"line-number"},[n._v("405")]),e("br")])]),e("blockquote",[e("p",[n._v('这里全部写在 .h文件的原因是使用了模板类，如果实现写在cpp文件中，使用的时候要加上#include "xxx.cpp"。因为模板类在使用的时候才知道具体要变成什么类型的函数。否则会报错')])]),n._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    int arr[] = { 1,5,4,3,2,6 };\n    int i, ilen;\n    BSTTree<int>* tree = new BSTTree<int>();\n\n    cout << "== 依次添加: ";\n    ilen = sizeof(arr) / sizeof(int);\n    for (i = 0; i < ilen; i++)\n    {\n        cout << arr[i] << " ";\n        tree->insert(arr[i]);\n    }\n\n    cout << "\\n== 前序遍历: ";\n    tree->preOrder();\n\n    cout << "\\n== 中序遍历: ";\n    tree->inOrder();\n\n    cout << "\\n== 后序遍历: ";\n    tree->postOrder();\n    cout << endl;\n\n    cout << "== 最小值: " << tree->minimum() << endl;\n    cout << "== 最大值: " << tree->maximum() << endl;\n    cout << "== 树的详细信息: " << endl;\n    tree->print();\n\n    cout << "\\n== 删除根节点: " << arr[3];\n    tree->remove(arr[3]);\n\n    cout << "\\n== 中序遍历: ";\n    tree->inOrder();\n    cout << endl;\n\n    // 销毁二叉树\n    tree->destroy();\n    delete tree;\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);