(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{624:function(a,n,t){"use strict";t.r(n);var s=t(15),e=Object(s.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[a._v("#")]),a._v(" 描述")]),a._v(" "),t("p",[a._v("QTransform是Qt中推荐的转换类。转换指定如何平移，缩放，剪切，旋转或投影坐标系，通常在渲染图形时使用。")]),a._v(" "),t("p",[a._v("QTransform类支持"),t("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E7%9F%A9%E9%98%B5&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[a._v("矩阵"),t("OutboundLink")],1),a._v("乘法，加法和减法，并且可以流式传输和比较该类的对象。")]),a._v(" "),t("h2",{attrs:{id:"_1-1、渲染图形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、渲染图形"}},[a._v("#")]),a._v(" 1.1、渲染图形")]),a._v(" "),t("p",[a._v("渲染图形时，矩阵定义了转换，但是实际的转换由QPainter执行。默认情况下，QPainter在关联设备自己的坐标系上运行。QPaintDevice的标准坐标系的原点位于左上角。x值向右增加； y值向下增加。")]),a._v(" "),t("p",[a._v("QPainter具有无需使用QTransform即可平移，缩放，剪切和旋转坐标系的功能。 例如：")]),a._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    QPainter painter(this);\n    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));\n    painter.drawRect(0, 0, 100, 100);\n \n    painter.rotate(45);\n \n    painter.setFont(QFont("Helvetica", 24));\n    painter.setPen(QPen(Qt::black, 1));\n    painter.drawText(20, 10, "QTransform");\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("但是，如果执行多个操作，或者执行沿着X轴Y轴，旋转的类3d操作(QPainter.rotate只支持平面绕远点旋转)就不行了。")]),a._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('     QPainter painter(this);\n     painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));\n     painter.drawRect(0, 0, 100, 100);\n \n     QTransform transform;\n     transform.translate(50, 50);\n     transform.rotate(45);\n     transform.scale(0.5, 1.0);\n     painter.setTransform(transform);\n \n     painter.setFont(QFont("Helvetica", 24));\n     painter.setPen(QPen(Qt::black, 1));\n     painter.drawText(20, 10, "QTransform");\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("p",[a._v("沿着X，Y轴旋转")]),a._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    transform.translate(width() / 2, height() / 2);\n    transform.rotate(mCard.angleX, Qt::XAxis);\n    transform.rotate(mCard.angleY, Qt::YAxis);\n    transform.translate(-width() / 2, -height() / 2);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("blockquote",[t("p",[a._v("transform只会记录当前位置的操作，比如，旋转时，默认是从原点开始的，但是如果你想从原点沿着x轴，中心点的y轴，然后按原点位置开始画一个图形，就需要先rotate（xx, Qt::XAxis）,transform(rect().center().x(), rect().center().y()), rotate(xx, Qt::YAxix),transform(-rect().center().x(), -rect().center().y()), paint();")]),a._v(" "),t("p",[a._v("类似这个意思。")])]),a._v(" "),t("h2",{attrs:{id:"_1-2、基本矩阵操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、基本矩阵操作"}},[a._v("#")]),a._v(" 1.2、基本矩阵操作")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/0321b52a9c9b37efd1d393b7a70e897a.png",alt:"img"}})]),a._v(" "),t("p",[a._v("一个QTransform对象包含一个3 x 3的矩阵。")]),a._v(" "),t("ul",[t("li",[a._v("m31（dx）和m32（dy）指定水平和垂直平移。")]),a._v(" "),t("li",[a._v("m11和m22元素指定水平和垂直缩放。")]),a._v(" "),t("li",[a._v("m21和m12元素指定水平和垂直剪切。")]),a._v(" "),t("li",[a._v("m13和m23元素指定水平和垂直投影，m33作为附加投影因子。")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210502150936243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlbmZhbjE2NDc=,size_16,color_FFFFFF,t_70",alt:"img"}})]),a._v(" "),t("p",[a._v("QTransform使用以下公式将平面中的一个点转换为另一个点：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" x' = m11*x + m21*y + dx\n y' = m22*y + m12*x + dy\n if (is not affine) \n{\n     w' = m13*x + m23*y + m33\n     x' /= w'\n     y' /= w'\n }\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("点（x，y）是原始点，（x'，y'）是变换后的点。通过对inverted()（倒置）矩阵执行相同的运算，可以将（x'，y'）转换回（x，y）。")]),a._v(" "),t("h1",{attrs:{id:"成员函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#成员函数"}},[a._v("#")]),a._v(" 成员函数")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("QTransform(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy)\nQTransform(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal \tm31, qreal m32, qreal m33 = 1.0)")]),a._v(" "),t("blockquote",[t("p",[a._v("构造")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform adjoint()")]),a._v(" "),t("blockquote",[t("p",[a._v("获取矩阵的伴随矩阵。"),t("a",{attrs:{href:"https://jingyan.baidu.com/article/ce09321b927f2d2bff858f08.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("伴随矩阵"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[t("p",[a._v("qreal determinant()")]),a._v(" "),t("blockquote",[t("p",[a._v("返回矩阵的行列式。"),t("a",{attrs:{href:"https://www.zhihu.com/question/36966326",target:"_blank",rel:"noopener noreferrer"}},[a._v("行列式"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[t("p",[a._v("[static] QTransform fromScale(qreal sx, qreal sy)")]),a._v(" "),t("blockquote",[t("p",[a._v("创建一个QTransform，矩阵对应于水平sx和垂直sy的缩放比例。 这与scale(sx,sy)相同，但速度稍快。")])])]),a._v(" "),t("li",[t("p",[a._v("[static] QTransform fromTranslate(qreal dx, qreal dy)")]),a._v(" "),t("blockquote",[t("p",[a._v("创建一个QTransform，阵对应于dx沿x轴和平移dy沿y轴平移。 这与translate(dx,dy)相同，但速度稍快。")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform inverted(bool *invertible = nullptr)")]),a._v(" "),t("blockquote",[t("p",[a._v("返回此矩阵的转置矩阵。如果矩阵是奇异的（不可逆），则返回的矩阵是恒等矩阵。 如果参数不为空，则如果矩阵是Invertible，则将其值设置为true，否则将其设置为false。")])])]),a._v(" "),t("li",[t("p",[a._v("bool isAffine()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否是仿射变换矩阵。"),t("a",{attrs:{href:"https://www.zhihu.com/question/20666664/answer/157400568",target:"_blank",rel:"noopener noreferrer"}},[a._v("仿射变换"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[t("p",[a._v("bool isIdentity()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否是单位矩阵。"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E5%8D%95%E4%BD%8D%E7%9F%A9%E9%98%B5",target:"_blank",rel:"noopener noreferrer"}},[a._v("单位矩阵"),t("OutboundLink")],1)])])]),a._v(" "),t("li",[t("p",[a._v("bool isInvertible()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否可逆。")])])]),a._v(" "),t("li",[t("p",[a._v("bool isRotating()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否表示某种旋转变换。180度和/或360度的旋转变换被视为缩放变换。")])])]),a._v(" "),t("li",[t("p",[a._v("bool isScaling()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否表示比例转换。")])])]),a._v(" "),t("li",[t("p",[a._v("bool isTranslating()")]),a._v(" "),t("blockquote",[t("p",[a._v("矩阵是否平移矩阵")])])]),a._v(" "),t("li",[t("div",{staticClass:"language-QPoint map(const QPoint &p) line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("       QPointF map(const QPointF &p) \n    \n       QLine map(const QLine &l) \n    \n       QLineF map(const QLineF &l) \n    \n       QPolygonF map(const QPolygonF &a) \n    \n       QPolygon map(const QPolygon &a) \n    \n       QRegion map(const QRegion &r) \n    \n       QPainterPath map(const QPainterPath &p) \n    \n       void map(int x, int y, int *tx, int *ty) \n    \n       void map(qreal x, qreal y, qreal *tx, qreal *ty) \n    \n       QRectF mapRect(const QRectF &rectangle) \n    \n       QRect mapRect(const QRect &rectangle) \n    \n       QPolygon mapToPolygon(const QRect &rectangle) \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])]),t("blockquote",[t("p",[a._v("把一个图形映射到矩阵坐标。")]),a._v(" "),t("p",[a._v("例，绘制矩形和圆心在（200,200）的圆：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(" QPainter painter(this);\n painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));\n painter.drawRect(0, 0, 100, 100);\n painter.setBrush(Qt::red);\n painter.drawEllipse(QPoint(200,200),10,10);\n\n\n QTransform transform;\n transform.translate(50, 50);\n transform.scale(0.5, 0.5);\n \n painter.setTransform(transform);\n painter.setPen(QPen(Qt::cyan, 1, Qt::DashDotLine));\n painter.drawRect(0, 0, 100, 100);\n auto point = transform.map(QPoint(200,200));\n qDebug()<<point;\n painter.drawEllipse(point,10,10);\n")])])]),t("p",[a._v("把点（200,200）做映射后绘制同样的形状：")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210502163608992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlbmZhbjE2NDc=,size_16,color_FFFFFF,t_70",alt:"img"}}),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210502163905644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlbmZhbjE2NDc=,size_16,color_FFFFFF,t_70",alt:"img"}})])]),a._v(" "),t("li",[t("p",[a._v("[static] bool quadToQuad(const QPolygonF &one, const QPolygonF &two, QTransform &trans)")]),a._v(" "),t("blockquote",[t("p",[a._v("多边形能否one映射到另一个多边形two。")])])]),a._v(" "),t("li",[t("p",[a._v("[static] bool quadToSquare(const QPolygonF &quad, QTransform &trans)")]),a._v(" "),t("blockquote",[t("p",[a._v("多边形quad能否在trans中映射为单位正方形。")])])]),a._v(" "),t("li",[t("p",[a._v("void reset()")]),a._v(" "),t("blockquote",[t("p",[a._v("将矩阵重置为单位矩阵，即所有元素均设置为零，m11、m22、m33设置为1，其他元素设为0。")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform &rotate(qreal angle, Qt::Axis axis = Qt::ZAxis)")]),a._v(" "),t("p",[a._v("​    QTransform &rotateRadians(qreal angle, Qt::Axis axis = Qt::ZAxis)")]),a._v(" "),t("blockquote",[t("p",[a._v("围绕指定的轴逆时针旋转坐标系，并返回对矩阵的引用。如果将QTransform应用于QWidget坐标中定义的点，则旋转方向将为顺时针方向，因为y轴指向下方")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform &scale(qreal sx, qreal sy)")]),a._v(" "),t("blockquote",[t("p",[a._v("按sx水平和sy垂直缩放坐标系，并返回对矩阵的引用。")])])]),a._v(" "),t("li",[t("p",[a._v("void setMatrix(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33)")]),a._v(" "),t("blockquote",[t("p",[a._v("设置矩阵。")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform &shear(qreal sh, qreal sv)")]),a._v(" "),t("blockquote",[t("p",[a._v("水平剪切水平轴，垂直剪切水平轴sv，并返回对矩阵的引用")]),a._v(" "),t("p",[a._v("auto rectPoint = event->rect().center();\nQTransform transform;\ntransform.translate(rectPoint.x(),rectPoint.y());")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v(" painter.setTransform(transform);\n painter.setPen(QPen(Qt::red, 3, Qt::DashDotLine));\n painter.drawRect(0, 0, 100, 100);\n \n transform.shear(0.5,0.5);\n painter.setTransform(transform);\n painter.setPen(QPen(Qt::cyan, 3, Qt::DashDotLine));\n painter.drawRect(0, 0, 100, 100);\n")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210502183950787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlbmZhbjE2NDc=,size_16,color_FFFFFF,t_70",alt:"img"}})])]),a._v(" "),t("li",[t("p",[a._v("[static] bool squareToQuad(const QPolygonF &quad, QTransform &trans)")]),a._v(" "),t("blockquote",[t("p",[a._v("变换矩阵trans是否可以将单位正方形映射到多边形quad。")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform &translate(qreal dx, qreal dy)")]),a._v(" "),t("blockquote",[t("p",[a._v("沿x轴移动坐标系dx并沿y轴移动dy，并返回对矩阵的引用")])])]),a._v(" "),t("li",[t("p",[a._v("QTransform transposed()")]),a._v(" "),t("blockquote",[t("p",[a._v("返回此矩阵的转置。")])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);