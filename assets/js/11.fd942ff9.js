(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{594:function(n,s,e){"use strict";e.r(s);var a=e(15),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),e("p",[n._v("AVL树是高度平衡的而二叉树。它的特点是：AVL树中任何节点的两个子树的高度最大差别为1。")]),n._v(" "),e("blockquote",[e("p",[n._v("具体讲解见 https://www.cnblogs.com/skywang12345/p/3577360.html")])]),n._v(" "),e("p",[n._v("注意插入删除后不平衡的情况需要看情况各种旋转。")]),n._v(" "),e("p",[n._v("以及删除的时候节点有双子节点的时候怎么变换成删除单子节点或无子节点的。")]),n._v(" "),e("p",[n._v("这里说一下链表实现。")]),n._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('#ifndef _AVL_TREE_HPP_\n#define _AVL_TREE_HPP_\n\n#include <iomanip>\n#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nclass AVLTreeNode {\npublic:\n    T key;                // 关键字(键值)\n    int height;         // 高度\n    AVLTreeNode* left;    // 左孩子\n    AVLTreeNode* right;    // 右孩子\n\n    AVLTreeNode(T value, AVLTreeNode* l, AVLTreeNode* r) :\n        key(value), height(0), left(l), right(r) {}\n    ~AVLTreeNode()\n    {\n        cout << "delele " << key << endl;\n    }\n};\n\ntemplate <typename T>\nclass AVLTree {\nprivate:\n    AVLTreeNode<T>* mRoot;    // 根结点\n\npublic:\n    AVLTree();\n    ~AVLTree();\n\n    // 获取树的高度\n    int height();\n    // 获取树的高度\n    int max(int a, int b);\n\n    // 前序遍历"AVL树"\n    void preOrder();\n    // 中序遍历"AVL树"\n    void inOrder();\n    // 后序遍历"AVL树"\n    void postOrder();\n\n    // (递归实现)查找"AVL树"中键值为key的节点\n    AVLTreeNode<T>* search(T key);\n    // (非递归实现)查找"AVL树"中键值为key的节点\n    AVLTreeNode<T>* iterativeSearch(T key);\n\n    // 查找最小结点：返回最小结点的键值。\n    T minimum();\n    // 查找最大结点：返回最大结点的键值。\n    T maximum();\n\n    // 将结点(key为节点键值)插入到AVL树中\n    void insert(T key);\n\n    // 删除结点(key为节点键值)\n    void remove(T key);\n\n    // 销毁AVL树\n    void destroy();\n\n    // 打印AVL树\n    void print();\nprivate:\n    // 获取树的高度\n    int height(AVLTreeNode<T>* tree);\n\n    // 前序遍历"AVL树"\n    void preOrder(AVLTreeNode<T>* tree) const;\n    // 中序遍历"AVL树"\n    void inOrder(AVLTreeNode<T>* tree) const;\n    // 后序遍历"AVL树"\n    void postOrder(AVLTreeNode<T>* tree) const;\n\n    // (递归实现)查找"AVL树x"中键值为key的节点\n    AVLTreeNode<T>* search(AVLTreeNode<T>* x, T key) const;\n    // (非递归实现)查找"AVL树x"中键值为key的节点\n    AVLTreeNode<T>* iterativeSearch(AVLTreeNode<T>* x, T key) const;\n\n    // 查找最小结点：返回tree为根结点的AVL树的最小结点。\n    AVLTreeNode<T>* minimum(AVLTreeNode<T>* tree);\n    // 查找最大结点：返回tree为根结点的AVL树的最大结点。\n    AVLTreeNode<T>* maximum(AVLTreeNode<T>* tree);\n\n    // LL：左左对应的情况(左单旋转)。\n    AVLTreeNode<T>* leftLeftRotation(AVLTreeNode<T>* k2);\n\n    // RR：右右对应的情况(右单旋转)。\n    AVLTreeNode<T>* rightRightRotation(AVLTreeNode<T>* k1);\n\n    // LR：左右对应的情况(左双旋转)。\n    AVLTreeNode<T>* leftRightRotation(AVLTreeNode<T>* k3);\n\n    // RL：右左对应的情况(右双旋转)。\n    AVLTreeNode<T>* rightLeftRotation(AVLTreeNode<T>* k1);\n\n    // 将结点(z)插入到AVL树(tree)中\n    AVLTreeNode<T>* insert(AVLTreeNode<T>*& tree, T key);\n\n    // 删除AVL树(tree)中的结点(z)，并返回被删除的结点\n    AVLTreeNode<T>* remove(AVLTreeNode<T>*& tree, AVLTreeNode<T>* z);\n\n    // 销毁AVL树\n    void destroy(AVLTreeNode<T>*& tree);\n\n    // 打印AVL树\n    void print(AVLTreeNode<T>* tree, T key, int direction);\n};\n\n/*\n * 构造函数\n */\ntemplate <class T>\nAVLTree<T>::AVLTree() :mRoot(NULL)\n{\n}\n\n/*\n * 析构函数\n */\ntemplate <class T>\nAVLTree<T>::~AVLTree()\n{\n    destroy(mRoot);\n}\n\n/*\n * 获取树的高度\n */\ntemplate <class T>\nint AVLTree<T>::height(AVLTreeNode<T>* tree)\n{\n    if (tree != NULL)\n        return tree->height;\n\n    return 0;\n}\n\ntemplate <class T>\nint AVLTree<T>::height()\n{\n    return height(mRoot);\n}\n/*\n * 比较两个值的大小\n */\ntemplate <class T>\nint AVLTree<T>::max(int a, int b)\n{\n    return a > b ? a : b;\n}\n\n/*\n * 前序遍历"AVL树"\n */\ntemplate <class T>\nvoid AVLTree<T>::preOrder(AVLTreeNode<T>* tree) const\n{\n    if (tree != NULL)\n    {\n        cout << tree->key << " ";\n        preOrder(tree->left);\n        preOrder(tree->right);\n    }\n}\n\ntemplate <class T>\nvoid AVLTree<T>::preOrder()\n{\n    preOrder(mRoot);\n}\n\n/*\n * 中序遍历"AVL树"\n */\ntemplate <class T>\nvoid AVLTree<T>::inOrder(AVLTreeNode<T>* tree) const\n{\n    if (tree != NULL)\n    {\n        inOrder(tree->left);\n        cout << tree->key << " ";\n        inOrder(tree->right);\n    }\n}\n\ntemplate <class T>\nvoid AVLTree<T>::inOrder()\n{\n    inOrder(mRoot);\n}\n\n/*\n * 后序遍历"AVL树"\n */\ntemplate <class T>\nvoid AVLTree<T>::postOrder(AVLTreeNode<T>* tree) const\n{\n    if (tree != NULL)\n    {\n        postOrder(tree->left);\n        postOrder(tree->right);\n        cout << tree->key << " ";\n    }\n}\n\ntemplate <class T>\nvoid AVLTree<T>::postOrder()\n{\n    postOrder(mRoot);\n}\n\n/*\n * (递归实现)查找"AVL树x"中键值为key的节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::search(AVLTreeNode<T>* x, T key) const\n{\n    if (x == NULL || x->key == key)\n        return x;\n\n    if (key < x->key)\n        return search(x->left, key);\n    else\n        return search(x->right, key);\n}\n\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::search(T key)\n{\n    return search(mRoot, key);\n}\n\n/*\n * (非递归实现)查找"AVL树x"中键值为key的节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::iterativeSearch(AVLTreeNode<T>* x, T key) const\n{\n    while ((x != NULL) && (x->key != key))\n    {\n        if (key < x->key)\n            x = x->left;\n        else\n            x = x->right;\n    }\n\n    return x;\n}\n\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::iterativeSearch(T key)\n{\n    return iterativeSearch(mRoot, key);\n}\n\n/*\n * 查找最小结点：返回tree为根结点的AVL树的最小结点。\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::minimum(AVLTreeNode<T>* tree)\n{\n    if (tree == NULL)\n        return NULL;\n\n    while (tree->left != NULL)\n        tree = tree->left;\n    return tree;\n}\n\ntemplate <class T>\nT AVLTree<T>::minimum()\n{\n    AVLTreeNode<T>* p = minimum(mRoot);\n    if (p != NULL)\n        return p->key;\n\n    return (T)NULL;\n}\n\n/*\n * 查找最大结点：返回tree为根结点的AVL树的最大结点。\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::maximum(AVLTreeNode<T>* tree)\n{\n    if (tree == NULL)\n        return NULL;\n\n    while (tree->right != NULL)\n        tree = tree->right;\n    return tree;\n}\n\ntemplate <class T>\nT AVLTree<T>::maximum()\n{\n    AVLTreeNode<T>* p = maximum(mRoot);\n    if (p != NULL)\n        return p->key;\n\n    return (T)NULL;\n}\n\n/*\n * LL：左左对应的情况(左单旋转)。\n *\n * 返回值：旋转后的根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::leftLeftRotation(AVLTreeNode<T>* k2)\n{\n    AVLTreeNode<T>* k1;\n\n    k1 = k2->left;\n    k2->left = k1->right;\n    k1->right = k2;\n\n    k2->height = max(height(k2->left), height(k2->right)) + 1;\n    k1->height = max(height(k1->left), k2->height) + 1;\n\n    return k1;\n}\n\n/*\n * RR：右右对应的情况(右单旋转)。\n *\n * 返回值：旋转后的根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::rightRightRotation(AVLTreeNode<T>* k1)\n{\n    AVLTreeNode<T>* k2;\n\n    k2 = k1->right;\n    k1->right = k2->left;\n    k2->left = k1;\n\n    k1->height = max(height(k1->left), height(k1->right)) + 1;\n    k2->height = max(height(k2->right), k1->height) + 1;\n\n    return k2;\n}\n\n/*\n * LR：左右对应的情况(左双旋转)。\n *\n * 返回值：旋转后的根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::leftRightRotation(AVLTreeNode<T>* k3)\n{\n    k3->left = rightRightRotation(k3->left);\n\n    return leftLeftRotation(k3);\n}\n\n/*\n * RL：右左对应的情况(右双旋转)。\n *\n * 返回值：旋转后的根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::rightLeftRotation(AVLTreeNode<T>* k1)\n{\n    k1->right = leftLeftRotation(k1->right);\n\n    return rightRightRotation(k1);\n}\n\n/*\n * 将结点插入到AVL树中，并返回根节点\n *\n * 参数说明：\n *     tree AVL树的根结点\n *     key 插入的结点的键值\n * 返回值：\n *     根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::insert(AVLTreeNode<T>*& tree, T key)\n{\n    if (tree == NULL)\n    {\n        // 新建节点\n        tree = new AVLTreeNode<T>(key, NULL, NULL);\n        if (tree == NULL)\n        {\n            cout << "ERROR: create avltree node failed!" << endl;\n            return NULL;\n        }\n    }\n    else if (key < tree->key) // 应该将key插入到"tree的左子树"的情况\n    {\n        tree->left = insert(tree->left, key);\n        // 插入节点后，若AVL树失去平衡，则进行相应的调节。\n        if (height(tree->left) - height(tree->right) == 2)\n        {\n            if (key < tree->left->key)\n                tree = leftLeftRotation(tree);\n            else\n                tree = leftRightRotation(tree);\n        }\n    }\n    else if (key > tree->key) // 应该将key插入到"tree的右子树"的情况\n    {\n        tree->right = insert(tree->right, key);\n        // 插入节点后，若AVL树失去平衡，则进行相应的调节。\n        if (height(tree->right) - height(tree->left) == 2)\n        {\n            if (key > tree->right->key)\n                tree = rightRightRotation(tree);\n            else\n                tree = rightLeftRotation(tree);\n        }\n    }\n    else //key == tree->key)\n    {\n        cout << "添加失败：不允许添加相同的节点！" << endl;\n    }\n\n    tree->height = max(height(tree->left), height(tree->right)) + 1;\n\n    return tree;\n}\n\ntemplate <class T>\nvoid AVLTree<T>::insert(T key)\n{\n    insert(mRoot, key);\n}\n\n/*\n * 删除结点(z)，返回根节点\n *\n * 参数说明：\n *     tree AVL树的根结点\n *     z 待删除的结点\n * 返回值：\n *     根节点\n */\ntemplate <class T>\nAVLTreeNode<T>* AVLTree<T>::remove(AVLTreeNode<T>*& tree, AVLTreeNode<T>* z)\n{\n    // 根为空 或者 没有要删除的节点，直接返回NULL。\n    if (tree == NULL || z == NULL)\n        return NULL;\n\n    if (z->key < tree->key)        // 待删除的节点在"tree的左子树"中\n    {\n        tree->left = remove(tree->left, z);\n        // 删除节点后，若AVL树失去平衡，则进行相应的调节。\n        if (height(tree->right) - height(tree->left) == 2)\n        {\n            AVLTreeNode<T>* r = tree->right;\n            if (height(r->left) > height(r->right))\n                tree = rightLeftRotation(tree);\n            else\n                tree = rightRightRotation(tree);\n        }\n    }\n    else if (z->key > tree->key)// 待删除的节点在"tree的右子树"中\n    {\n        tree->right = remove(tree->right, z);\n        // 删除节点后，若AVL树失去平衡，则进行相应的调节。\n        if (height(tree->left) - height(tree->right) == 2)\n        {\n            AVLTreeNode<T>* l = tree->left;\n            if (height(l->right) > height(l->left))\n                tree = leftRightRotation(tree);\n            else\n                tree = leftLeftRotation(tree);\n        }\n    }\n    else    // tree是对应要删除的节点。\n    {\n        // tree的左右孩子都非空\n        if ((tree->left != NULL) && (tree->right != NULL))\n        {\n            if (height(tree->left) > height(tree->right))\n            {\n                // 如果tree的左子树比右子树高；\n                // 则(01)找出tree的左子树中的最大节点\n                //   (02)将该最大节点的值赋值给tree。\n                //   (03)删除该最大节点。\n                // 这类似于用"tree的左子树中最大节点"做"tree"的替身；\n                // 采用这种方式的好处是：删除"tree的左子树中最大节点"之后，AVL树仍然是平衡的。\n                AVLTreeNode<T>* max = maximum(tree->left);\n                tree->key = max->key;\n                tree->left = remove(tree->left, max);\n            }\n            else\n            {\n                // 如果tree的左子树不比右子树高(即它们相等，或右子树比左子树高1)\n                // 则(01)找出tree的右子树中的最小节点\n                //   (02)将该最小节点的值赋值给tree。\n                //   (03)删除该最小节点。\n                // 这类似于用"tree的右子树中最小节点"做"tree"的替身；\n                // 采用这种方式的好处是：删除"tree的右子树中最小节点"之后，AVL树仍然是平衡的。\n                AVLTreeNode<T>* min = maximum(tree->right);\n                tree->key = min->key;\n                tree->right = remove(tree->right, min);\n            }\n        }\n        else\n        {\n            AVLTreeNode<T>* tmp = tree;\n            tree = (tree->left != NULL) ? tree->left : tree->right;\n            delete tmp;\n        }\n    }\n\n    return tree;\n}\n\ntemplate <class T>\nvoid AVLTree<T>::remove(T key)\n{\n    AVLTreeNode<T>* z;\n\n    if ((z = search(mRoot, key)) != NULL)\n        mRoot = remove(mRoot, z);\n}\n\n/*\n * 销毁AVL树\n */\ntemplate <class T>\nvoid AVLTree<T>::destroy(AVLTreeNode<T>*& tree)\n{\n    if (tree == nullptr)\n        return;\n\n    if (tree->left)\n        destroy(tree->left);\n    if (tree->right)\n        destroy(tree->right);\n\n    delete tree;\n    tree = nullptr;\n}\n\ntemplate <class T>\nvoid AVLTree<T>::destroy()\n{\n    destroy(mRoot);\n}\n\n/*\n * 打印"二叉查找树"\n *\n * key        -- 节点的键值\n * direction  --  0，表示该节点是根节点;\n *               -1，表示该节点是它的父结点的左孩子;\n *                1，表示该节点是它的父结点的右孩子。\n */\ntemplate <class T>\nvoid AVLTree<T>::print(AVLTreeNode<T>* tree, T key, int direction)\n{\n    if (tree != NULL)\n    {\n        if (direction == 0)    // tree是根节点\n            cout << setw(2) << tree->key << " is root" << endl;\n        else                // tree是分支节点\n            cout << setw(2) << tree->key << " is " << setw(2) << key << "\'s " << setw(12) << (direction == 1 ? "right child" : "left child") << endl;\n\n        print(tree->left, tree->key, -1);\n        print(tree->right, tree->key, 1);\n    }\n}\n\ntemplate <class T>\nvoid AVLTree<T>::print()\n{\n    if (mRoot != NULL)\n        print(mRoot, mRoot->key, 0);\n}\n#endif\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br"),e("span",{staticClass:"line-number"},[n._v("60")]),e("br"),e("span",{staticClass:"line-number"},[n._v("61")]),e("br"),e("span",{staticClass:"line-number"},[n._v("62")]),e("br"),e("span",{staticClass:"line-number"},[n._v("63")]),e("br"),e("span",{staticClass:"line-number"},[n._v("64")]),e("br"),e("span",{staticClass:"line-number"},[n._v("65")]),e("br"),e("span",{staticClass:"line-number"},[n._v("66")]),e("br"),e("span",{staticClass:"line-number"},[n._v("67")]),e("br"),e("span",{staticClass:"line-number"},[n._v("68")]),e("br"),e("span",{staticClass:"line-number"},[n._v("69")]),e("br"),e("span",{staticClass:"line-number"},[n._v("70")]),e("br"),e("span",{staticClass:"line-number"},[n._v("71")]),e("br"),e("span",{staticClass:"line-number"},[n._v("72")]),e("br"),e("span",{staticClass:"line-number"},[n._v("73")]),e("br"),e("span",{staticClass:"line-number"},[n._v("74")]),e("br"),e("span",{staticClass:"line-number"},[n._v("75")]),e("br"),e("span",{staticClass:"line-number"},[n._v("76")]),e("br"),e("span",{staticClass:"line-number"},[n._v("77")]),e("br"),e("span",{staticClass:"line-number"},[n._v("78")]),e("br"),e("span",{staticClass:"line-number"},[n._v("79")]),e("br"),e("span",{staticClass:"line-number"},[n._v("80")]),e("br"),e("span",{staticClass:"line-number"},[n._v("81")]),e("br"),e("span",{staticClass:"line-number"},[n._v("82")]),e("br"),e("span",{staticClass:"line-number"},[n._v("83")]),e("br"),e("span",{staticClass:"line-number"},[n._v("84")]),e("br"),e("span",{staticClass:"line-number"},[n._v("85")]),e("br"),e("span",{staticClass:"line-number"},[n._v("86")]),e("br"),e("span",{staticClass:"line-number"},[n._v("87")]),e("br"),e("span",{staticClass:"line-number"},[n._v("88")]),e("br"),e("span",{staticClass:"line-number"},[n._v("89")]),e("br"),e("span",{staticClass:"line-number"},[n._v("90")]),e("br"),e("span",{staticClass:"line-number"},[n._v("91")]),e("br"),e("span",{staticClass:"line-number"},[n._v("92")]),e("br"),e("span",{staticClass:"line-number"},[n._v("93")]),e("br"),e("span",{staticClass:"line-number"},[n._v("94")]),e("br"),e("span",{staticClass:"line-number"},[n._v("95")]),e("br"),e("span",{staticClass:"line-number"},[n._v("96")]),e("br"),e("span",{staticClass:"line-number"},[n._v("97")]),e("br"),e("span",{staticClass:"line-number"},[n._v("98")]),e("br"),e("span",{staticClass:"line-number"},[n._v("99")]),e("br"),e("span",{staticClass:"line-number"},[n._v("100")]),e("br"),e("span",{staticClass:"line-number"},[n._v("101")]),e("br"),e("span",{staticClass:"line-number"},[n._v("102")]),e("br"),e("span",{staticClass:"line-number"},[n._v("103")]),e("br"),e("span",{staticClass:"line-number"},[n._v("104")]),e("br"),e("span",{staticClass:"line-number"},[n._v("105")]),e("br"),e("span",{staticClass:"line-number"},[n._v("106")]),e("br"),e("span",{staticClass:"line-number"},[n._v("107")]),e("br"),e("span",{staticClass:"line-number"},[n._v("108")]),e("br"),e("span",{staticClass:"line-number"},[n._v("109")]),e("br"),e("span",{staticClass:"line-number"},[n._v("110")]),e("br"),e("span",{staticClass:"line-number"},[n._v("111")]),e("br"),e("span",{staticClass:"line-number"},[n._v("112")]),e("br"),e("span",{staticClass:"line-number"},[n._v("113")]),e("br"),e("span",{staticClass:"line-number"},[n._v("114")]),e("br"),e("span",{staticClass:"line-number"},[n._v("115")]),e("br"),e("span",{staticClass:"line-number"},[n._v("116")]),e("br"),e("span",{staticClass:"line-number"},[n._v("117")]),e("br"),e("span",{staticClass:"line-number"},[n._v("118")]),e("br"),e("span",{staticClass:"line-number"},[n._v("119")]),e("br"),e("span",{staticClass:"line-number"},[n._v("120")]),e("br"),e("span",{staticClass:"line-number"},[n._v("121")]),e("br"),e("span",{staticClass:"line-number"},[n._v("122")]),e("br"),e("span",{staticClass:"line-number"},[n._v("123")]),e("br"),e("span",{staticClass:"line-number"},[n._v("124")]),e("br"),e("span",{staticClass:"line-number"},[n._v("125")]),e("br"),e("span",{staticClass:"line-number"},[n._v("126")]),e("br"),e("span",{staticClass:"line-number"},[n._v("127")]),e("br"),e("span",{staticClass:"line-number"},[n._v("128")]),e("br"),e("span",{staticClass:"line-number"},[n._v("129")]),e("br"),e("span",{staticClass:"line-number"},[n._v("130")]),e("br"),e("span",{staticClass:"line-number"},[n._v("131")]),e("br"),e("span",{staticClass:"line-number"},[n._v("132")]),e("br"),e("span",{staticClass:"line-number"},[n._v("133")]),e("br"),e("span",{staticClass:"line-number"},[n._v("134")]),e("br"),e("span",{staticClass:"line-number"},[n._v("135")]),e("br"),e("span",{staticClass:"line-number"},[n._v("136")]),e("br"),e("span",{staticClass:"line-number"},[n._v("137")]),e("br"),e("span",{staticClass:"line-number"},[n._v("138")]),e("br"),e("span",{staticClass:"line-number"},[n._v("139")]),e("br"),e("span",{staticClass:"line-number"},[n._v("140")]),e("br"),e("span",{staticClass:"line-number"},[n._v("141")]),e("br"),e("span",{staticClass:"line-number"},[n._v("142")]),e("br"),e("span",{staticClass:"line-number"},[n._v("143")]),e("br"),e("span",{staticClass:"line-number"},[n._v("144")]),e("br"),e("span",{staticClass:"line-number"},[n._v("145")]),e("br"),e("span",{staticClass:"line-number"},[n._v("146")]),e("br"),e("span",{staticClass:"line-number"},[n._v("147")]),e("br"),e("span",{staticClass:"line-number"},[n._v("148")]),e("br"),e("span",{staticClass:"line-number"},[n._v("149")]),e("br"),e("span",{staticClass:"line-number"},[n._v("150")]),e("br"),e("span",{staticClass:"line-number"},[n._v("151")]),e("br"),e("span",{staticClass:"line-number"},[n._v("152")]),e("br"),e("span",{staticClass:"line-number"},[n._v("153")]),e("br"),e("span",{staticClass:"line-number"},[n._v("154")]),e("br"),e("span",{staticClass:"line-number"},[n._v("155")]),e("br"),e("span",{staticClass:"line-number"},[n._v("156")]),e("br"),e("span",{staticClass:"line-number"},[n._v("157")]),e("br"),e("span",{staticClass:"line-number"},[n._v("158")]),e("br"),e("span",{staticClass:"line-number"},[n._v("159")]),e("br"),e("span",{staticClass:"line-number"},[n._v("160")]),e("br"),e("span",{staticClass:"line-number"},[n._v("161")]),e("br"),e("span",{staticClass:"line-number"},[n._v("162")]),e("br"),e("span",{staticClass:"line-number"},[n._v("163")]),e("br"),e("span",{staticClass:"line-number"},[n._v("164")]),e("br"),e("span",{staticClass:"line-number"},[n._v("165")]),e("br"),e("span",{staticClass:"line-number"},[n._v("166")]),e("br"),e("span",{staticClass:"line-number"},[n._v("167")]),e("br"),e("span",{staticClass:"line-number"},[n._v("168")]),e("br"),e("span",{staticClass:"line-number"},[n._v("169")]),e("br"),e("span",{staticClass:"line-number"},[n._v("170")]),e("br"),e("span",{staticClass:"line-number"},[n._v("171")]),e("br"),e("span",{staticClass:"line-number"},[n._v("172")]),e("br"),e("span",{staticClass:"line-number"},[n._v("173")]),e("br"),e("span",{staticClass:"line-number"},[n._v("174")]),e("br"),e("span",{staticClass:"line-number"},[n._v("175")]),e("br"),e("span",{staticClass:"line-number"},[n._v("176")]),e("br"),e("span",{staticClass:"line-number"},[n._v("177")]),e("br"),e("span",{staticClass:"line-number"},[n._v("178")]),e("br"),e("span",{staticClass:"line-number"},[n._v("179")]),e("br"),e("span",{staticClass:"line-number"},[n._v("180")]),e("br"),e("span",{staticClass:"line-number"},[n._v("181")]),e("br"),e("span",{staticClass:"line-number"},[n._v("182")]),e("br"),e("span",{staticClass:"line-number"},[n._v("183")]),e("br"),e("span",{staticClass:"line-number"},[n._v("184")]),e("br"),e("span",{staticClass:"line-number"},[n._v("185")]),e("br"),e("span",{staticClass:"line-number"},[n._v("186")]),e("br"),e("span",{staticClass:"line-number"},[n._v("187")]),e("br"),e("span",{staticClass:"line-number"},[n._v("188")]),e("br"),e("span",{staticClass:"line-number"},[n._v("189")]),e("br"),e("span",{staticClass:"line-number"},[n._v("190")]),e("br"),e("span",{staticClass:"line-number"},[n._v("191")]),e("br"),e("span",{staticClass:"line-number"},[n._v("192")]),e("br"),e("span",{staticClass:"line-number"},[n._v("193")]),e("br"),e("span",{staticClass:"line-number"},[n._v("194")]),e("br"),e("span",{staticClass:"line-number"},[n._v("195")]),e("br"),e("span",{staticClass:"line-number"},[n._v("196")]),e("br"),e("span",{staticClass:"line-number"},[n._v("197")]),e("br"),e("span",{staticClass:"line-number"},[n._v("198")]),e("br"),e("span",{staticClass:"line-number"},[n._v("199")]),e("br"),e("span",{staticClass:"line-number"},[n._v("200")]),e("br"),e("span",{staticClass:"line-number"},[n._v("201")]),e("br"),e("span",{staticClass:"line-number"},[n._v("202")]),e("br"),e("span",{staticClass:"line-number"},[n._v("203")]),e("br"),e("span",{staticClass:"line-number"},[n._v("204")]),e("br"),e("span",{staticClass:"line-number"},[n._v("205")]),e("br"),e("span",{staticClass:"line-number"},[n._v("206")]),e("br"),e("span",{staticClass:"line-number"},[n._v("207")]),e("br"),e("span",{staticClass:"line-number"},[n._v("208")]),e("br"),e("span",{staticClass:"line-number"},[n._v("209")]),e("br"),e("span",{staticClass:"line-number"},[n._v("210")]),e("br"),e("span",{staticClass:"line-number"},[n._v("211")]),e("br"),e("span",{staticClass:"line-number"},[n._v("212")]),e("br"),e("span",{staticClass:"line-number"},[n._v("213")]),e("br"),e("span",{staticClass:"line-number"},[n._v("214")]),e("br"),e("span",{staticClass:"line-number"},[n._v("215")]),e("br"),e("span",{staticClass:"line-number"},[n._v("216")]),e("br"),e("span",{staticClass:"line-number"},[n._v("217")]),e("br"),e("span",{staticClass:"line-number"},[n._v("218")]),e("br"),e("span",{staticClass:"line-number"},[n._v("219")]),e("br"),e("span",{staticClass:"line-number"},[n._v("220")]),e("br"),e("span",{staticClass:"line-number"},[n._v("221")]),e("br"),e("span",{staticClass:"line-number"},[n._v("222")]),e("br"),e("span",{staticClass:"line-number"},[n._v("223")]),e("br"),e("span",{staticClass:"line-number"},[n._v("224")]),e("br"),e("span",{staticClass:"line-number"},[n._v("225")]),e("br"),e("span",{staticClass:"line-number"},[n._v("226")]),e("br"),e("span",{staticClass:"line-number"},[n._v("227")]),e("br"),e("span",{staticClass:"line-number"},[n._v("228")]),e("br"),e("span",{staticClass:"line-number"},[n._v("229")]),e("br"),e("span",{staticClass:"line-number"},[n._v("230")]),e("br"),e("span",{staticClass:"line-number"},[n._v("231")]),e("br"),e("span",{staticClass:"line-number"},[n._v("232")]),e("br"),e("span",{staticClass:"line-number"},[n._v("233")]),e("br"),e("span",{staticClass:"line-number"},[n._v("234")]),e("br"),e("span",{staticClass:"line-number"},[n._v("235")]),e("br"),e("span",{staticClass:"line-number"},[n._v("236")]),e("br"),e("span",{staticClass:"line-number"},[n._v("237")]),e("br"),e("span",{staticClass:"line-number"},[n._v("238")]),e("br"),e("span",{staticClass:"line-number"},[n._v("239")]),e("br"),e("span",{staticClass:"line-number"},[n._v("240")]),e("br"),e("span",{staticClass:"line-number"},[n._v("241")]),e("br"),e("span",{staticClass:"line-number"},[n._v("242")]),e("br"),e("span",{staticClass:"line-number"},[n._v("243")]),e("br"),e("span",{staticClass:"line-number"},[n._v("244")]),e("br"),e("span",{staticClass:"line-number"},[n._v("245")]),e("br"),e("span",{staticClass:"line-number"},[n._v("246")]),e("br"),e("span",{staticClass:"line-number"},[n._v("247")]),e("br"),e("span",{staticClass:"line-number"},[n._v("248")]),e("br"),e("span",{staticClass:"line-number"},[n._v("249")]),e("br"),e("span",{staticClass:"line-number"},[n._v("250")]),e("br"),e("span",{staticClass:"line-number"},[n._v("251")]),e("br"),e("span",{staticClass:"line-number"},[n._v("252")]),e("br"),e("span",{staticClass:"line-number"},[n._v("253")]),e("br"),e("span",{staticClass:"line-number"},[n._v("254")]),e("br"),e("span",{staticClass:"line-number"},[n._v("255")]),e("br"),e("span",{staticClass:"line-number"},[n._v("256")]),e("br"),e("span",{staticClass:"line-number"},[n._v("257")]),e("br"),e("span",{staticClass:"line-number"},[n._v("258")]),e("br"),e("span",{staticClass:"line-number"},[n._v("259")]),e("br"),e("span",{staticClass:"line-number"},[n._v("260")]),e("br"),e("span",{staticClass:"line-number"},[n._v("261")]),e("br"),e("span",{staticClass:"line-number"},[n._v("262")]),e("br"),e("span",{staticClass:"line-number"},[n._v("263")]),e("br"),e("span",{staticClass:"line-number"},[n._v("264")]),e("br"),e("span",{staticClass:"line-number"},[n._v("265")]),e("br"),e("span",{staticClass:"line-number"},[n._v("266")]),e("br"),e("span",{staticClass:"line-number"},[n._v("267")]),e("br"),e("span",{staticClass:"line-number"},[n._v("268")]),e("br"),e("span",{staticClass:"line-number"},[n._v("269")]),e("br"),e("span",{staticClass:"line-number"},[n._v("270")]),e("br"),e("span",{staticClass:"line-number"},[n._v("271")]),e("br"),e("span",{staticClass:"line-number"},[n._v("272")]),e("br"),e("span",{staticClass:"line-number"},[n._v("273")]),e("br"),e("span",{staticClass:"line-number"},[n._v("274")]),e("br"),e("span",{staticClass:"line-number"},[n._v("275")]),e("br"),e("span",{staticClass:"line-number"},[n._v("276")]),e("br"),e("span",{staticClass:"line-number"},[n._v("277")]),e("br"),e("span",{staticClass:"line-number"},[n._v("278")]),e("br"),e("span",{staticClass:"line-number"},[n._v("279")]),e("br"),e("span",{staticClass:"line-number"},[n._v("280")]),e("br"),e("span",{staticClass:"line-number"},[n._v("281")]),e("br"),e("span",{staticClass:"line-number"},[n._v("282")]),e("br"),e("span",{staticClass:"line-number"},[n._v("283")]),e("br"),e("span",{staticClass:"line-number"},[n._v("284")]),e("br"),e("span",{staticClass:"line-number"},[n._v("285")]),e("br"),e("span",{staticClass:"line-number"},[n._v("286")]),e("br"),e("span",{staticClass:"line-number"},[n._v("287")]),e("br"),e("span",{staticClass:"line-number"},[n._v("288")]),e("br"),e("span",{staticClass:"line-number"},[n._v("289")]),e("br"),e("span",{staticClass:"line-number"},[n._v("290")]),e("br"),e("span",{staticClass:"line-number"},[n._v("291")]),e("br"),e("span",{staticClass:"line-number"},[n._v("292")]),e("br"),e("span",{staticClass:"line-number"},[n._v("293")]),e("br"),e("span",{staticClass:"line-number"},[n._v("294")]),e("br"),e("span",{staticClass:"line-number"},[n._v("295")]),e("br"),e("span",{staticClass:"line-number"},[n._v("296")]),e("br"),e("span",{staticClass:"line-number"},[n._v("297")]),e("br"),e("span",{staticClass:"line-number"},[n._v("298")]),e("br"),e("span",{staticClass:"line-number"},[n._v("299")]),e("br"),e("span",{staticClass:"line-number"},[n._v("300")]),e("br"),e("span",{staticClass:"line-number"},[n._v("301")]),e("br"),e("span",{staticClass:"line-number"},[n._v("302")]),e("br"),e("span",{staticClass:"line-number"},[n._v("303")]),e("br"),e("span",{staticClass:"line-number"},[n._v("304")]),e("br"),e("span",{staticClass:"line-number"},[n._v("305")]),e("br"),e("span",{staticClass:"line-number"},[n._v("306")]),e("br"),e("span",{staticClass:"line-number"},[n._v("307")]),e("br"),e("span",{staticClass:"line-number"},[n._v("308")]),e("br"),e("span",{staticClass:"line-number"},[n._v("309")]),e("br"),e("span",{staticClass:"line-number"},[n._v("310")]),e("br"),e("span",{staticClass:"line-number"},[n._v("311")]),e("br"),e("span",{staticClass:"line-number"},[n._v("312")]),e("br"),e("span",{staticClass:"line-number"},[n._v("313")]),e("br"),e("span",{staticClass:"line-number"},[n._v("314")]),e("br"),e("span",{staticClass:"line-number"},[n._v("315")]),e("br"),e("span",{staticClass:"line-number"},[n._v("316")]),e("br"),e("span",{staticClass:"line-number"},[n._v("317")]),e("br"),e("span",{staticClass:"line-number"},[n._v("318")]),e("br"),e("span",{staticClass:"line-number"},[n._v("319")]),e("br"),e("span",{staticClass:"line-number"},[n._v("320")]),e("br"),e("span",{staticClass:"line-number"},[n._v("321")]),e("br"),e("span",{staticClass:"line-number"},[n._v("322")]),e("br"),e("span",{staticClass:"line-number"},[n._v("323")]),e("br"),e("span",{staticClass:"line-number"},[n._v("324")]),e("br"),e("span",{staticClass:"line-number"},[n._v("325")]),e("br"),e("span",{staticClass:"line-number"},[n._v("326")]),e("br"),e("span",{staticClass:"line-number"},[n._v("327")]),e("br"),e("span",{staticClass:"line-number"},[n._v("328")]),e("br"),e("span",{staticClass:"line-number"},[n._v("329")]),e("br"),e("span",{staticClass:"line-number"},[n._v("330")]),e("br"),e("span",{staticClass:"line-number"},[n._v("331")]),e("br"),e("span",{staticClass:"line-number"},[n._v("332")]),e("br"),e("span",{staticClass:"line-number"},[n._v("333")]),e("br"),e("span",{staticClass:"line-number"},[n._v("334")]),e("br"),e("span",{staticClass:"line-number"},[n._v("335")]),e("br"),e("span",{staticClass:"line-number"},[n._v("336")]),e("br"),e("span",{staticClass:"line-number"},[n._v("337")]),e("br"),e("span",{staticClass:"line-number"},[n._v("338")]),e("br"),e("span",{staticClass:"line-number"},[n._v("339")]),e("br"),e("span",{staticClass:"line-number"},[n._v("340")]),e("br"),e("span",{staticClass:"line-number"},[n._v("341")]),e("br"),e("span",{staticClass:"line-number"},[n._v("342")]),e("br"),e("span",{staticClass:"line-number"},[n._v("343")]),e("br"),e("span",{staticClass:"line-number"},[n._v("344")]),e("br"),e("span",{staticClass:"line-number"},[n._v("345")]),e("br"),e("span",{staticClass:"line-number"},[n._v("346")]),e("br"),e("span",{staticClass:"line-number"},[n._v("347")]),e("br"),e("span",{staticClass:"line-number"},[n._v("348")]),e("br"),e("span",{staticClass:"line-number"},[n._v("349")]),e("br"),e("span",{staticClass:"line-number"},[n._v("350")]),e("br"),e("span",{staticClass:"line-number"},[n._v("351")]),e("br"),e("span",{staticClass:"line-number"},[n._v("352")]),e("br"),e("span",{staticClass:"line-number"},[n._v("353")]),e("br"),e("span",{staticClass:"line-number"},[n._v("354")]),e("br"),e("span",{staticClass:"line-number"},[n._v("355")]),e("br"),e("span",{staticClass:"line-number"},[n._v("356")]),e("br"),e("span",{staticClass:"line-number"},[n._v("357")]),e("br"),e("span",{staticClass:"line-number"},[n._v("358")]),e("br"),e("span",{staticClass:"line-number"},[n._v("359")]),e("br"),e("span",{staticClass:"line-number"},[n._v("360")]),e("br"),e("span",{staticClass:"line-number"},[n._v("361")]),e("br"),e("span",{staticClass:"line-number"},[n._v("362")]),e("br"),e("span",{staticClass:"line-number"},[n._v("363")]),e("br"),e("span",{staticClass:"line-number"},[n._v("364")]),e("br"),e("span",{staticClass:"line-number"},[n._v("365")]),e("br"),e("span",{staticClass:"line-number"},[n._v("366")]),e("br"),e("span",{staticClass:"line-number"},[n._v("367")]),e("br"),e("span",{staticClass:"line-number"},[n._v("368")]),e("br"),e("span",{staticClass:"line-number"},[n._v("369")]),e("br"),e("span",{staticClass:"line-number"},[n._v("370")]),e("br"),e("span",{staticClass:"line-number"},[n._v("371")]),e("br"),e("span",{staticClass:"line-number"},[n._v("372")]),e("br"),e("span",{staticClass:"line-number"},[n._v("373")]),e("br"),e("span",{staticClass:"line-number"},[n._v("374")]),e("br"),e("span",{staticClass:"line-number"},[n._v("375")]),e("br"),e("span",{staticClass:"line-number"},[n._v("376")]),e("br"),e("span",{staticClass:"line-number"},[n._v("377")]),e("br"),e("span",{staticClass:"line-number"},[n._v("378")]),e("br"),e("span",{staticClass:"line-number"},[n._v("379")]),e("br"),e("span",{staticClass:"line-number"},[n._v("380")]),e("br"),e("span",{staticClass:"line-number"},[n._v("381")]),e("br"),e("span",{staticClass:"line-number"},[n._v("382")]),e("br"),e("span",{staticClass:"line-number"},[n._v("383")]),e("br"),e("span",{staticClass:"line-number"},[n._v("384")]),e("br"),e("span",{staticClass:"line-number"},[n._v("385")]),e("br"),e("span",{staticClass:"line-number"},[n._v("386")]),e("br"),e("span",{staticClass:"line-number"},[n._v("387")]),e("br"),e("span",{staticClass:"line-number"},[n._v("388")]),e("br"),e("span",{staticClass:"line-number"},[n._v("389")]),e("br"),e("span",{staticClass:"line-number"},[n._v("390")]),e("br"),e("span",{staticClass:"line-number"},[n._v("391")]),e("br"),e("span",{staticClass:"line-number"},[n._v("392")]),e("br"),e("span",{staticClass:"line-number"},[n._v("393")]),e("br"),e("span",{staticClass:"line-number"},[n._v("394")]),e("br"),e("span",{staticClass:"line-number"},[n._v("395")]),e("br"),e("span",{staticClass:"line-number"},[n._v("396")]),e("br"),e("span",{staticClass:"line-number"},[n._v("397")]),e("br"),e("span",{staticClass:"line-number"},[n._v("398")]),e("br"),e("span",{staticClass:"line-number"},[n._v("399")]),e("br"),e("span",{staticClass:"line-number"},[n._v("400")]),e("br"),e("span",{staticClass:"line-number"},[n._v("401")]),e("br"),e("span",{staticClass:"line-number"},[n._v("402")]),e("br"),e("span",{staticClass:"line-number"},[n._v("403")]),e("br"),e("span",{staticClass:"line-number"},[n._v("404")]),e("br"),e("span",{staticClass:"line-number"},[n._v("405")]),e("br"),e("span",{staticClass:"line-number"},[n._v("406")]),e("br"),e("span",{staticClass:"line-number"},[n._v("407")]),e("br"),e("span",{staticClass:"line-number"},[n._v("408")]),e("br"),e("span",{staticClass:"line-number"},[n._v("409")]),e("br"),e("span",{staticClass:"line-number"},[n._v("410")]),e("br"),e("span",{staticClass:"line-number"},[n._v("411")]),e("br"),e("span",{staticClass:"line-number"},[n._v("412")]),e("br"),e("span",{staticClass:"line-number"},[n._v("413")]),e("br"),e("span",{staticClass:"line-number"},[n._v("414")]),e("br"),e("span",{staticClass:"line-number"},[n._v("415")]),e("br"),e("span",{staticClass:"line-number"},[n._v("416")]),e("br"),e("span",{staticClass:"line-number"},[n._v("417")]),e("br"),e("span",{staticClass:"line-number"},[n._v("418")]),e("br"),e("span",{staticClass:"line-number"},[n._v("419")]),e("br"),e("span",{staticClass:"line-number"},[n._v("420")]),e("br"),e("span",{staticClass:"line-number"},[n._v("421")]),e("br"),e("span",{staticClass:"line-number"},[n._v("422")]),e("br"),e("span",{staticClass:"line-number"},[n._v("423")]),e("br"),e("span",{staticClass:"line-number"},[n._v("424")]),e("br"),e("span",{staticClass:"line-number"},[n._v("425")]),e("br"),e("span",{staticClass:"line-number"},[n._v("426")]),e("br"),e("span",{staticClass:"line-number"},[n._v("427")]),e("br"),e("span",{staticClass:"line-number"},[n._v("428")]),e("br"),e("span",{staticClass:"line-number"},[n._v("429")]),e("br"),e("span",{staticClass:"line-number"},[n._v("430")]),e("br"),e("span",{staticClass:"line-number"},[n._v("431")]),e("br"),e("span",{staticClass:"line-number"},[n._v("432")]),e("br"),e("span",{staticClass:"line-number"},[n._v("433")]),e("br"),e("span",{staticClass:"line-number"},[n._v("434")]),e("br"),e("span",{staticClass:"line-number"},[n._v("435")]),e("br"),e("span",{staticClass:"line-number"},[n._v("436")]),e("br"),e("span",{staticClass:"line-number"},[n._v("437")]),e("br"),e("span",{staticClass:"line-number"},[n._v("438")]),e("br"),e("span",{staticClass:"line-number"},[n._v("439")]),e("br"),e("span",{staticClass:"line-number"},[n._v("440")]),e("br"),e("span",{staticClass:"line-number"},[n._v("441")]),e("br"),e("span",{staticClass:"line-number"},[n._v("442")]),e("br"),e("span",{staticClass:"line-number"},[n._v("443")]),e("br"),e("span",{staticClass:"line-number"},[n._v("444")]),e("br"),e("span",{staticClass:"line-number"},[n._v("445")]),e("br"),e("span",{staticClass:"line-number"},[n._v("446")]),e("br"),e("span",{staticClass:"line-number"},[n._v("447")]),e("br"),e("span",{staticClass:"line-number"},[n._v("448")]),e("br"),e("span",{staticClass:"line-number"},[n._v("449")]),e("br"),e("span",{staticClass:"line-number"},[n._v("450")]),e("br"),e("span",{staticClass:"line-number"},[n._v("451")]),e("br"),e("span",{staticClass:"line-number"},[n._v("452")]),e("br"),e("span",{staticClass:"line-number"},[n._v("453")]),e("br"),e("span",{staticClass:"line-number"},[n._v("454")]),e("br"),e("span",{staticClass:"line-number"},[n._v("455")]),e("br"),e("span",{staticClass:"line-number"},[n._v("456")]),e("br"),e("span",{staticClass:"line-number"},[n._v("457")]),e("br"),e("span",{staticClass:"line-number"},[n._v("458")]),e("br"),e("span",{staticClass:"line-number"},[n._v("459")]),e("br"),e("span",{staticClass:"line-number"},[n._v("460")]),e("br"),e("span",{staticClass:"line-number"},[n._v("461")]),e("br"),e("span",{staticClass:"line-number"},[n._v("462")]),e("br"),e("span",{staticClass:"line-number"},[n._v("463")]),e("br"),e("span",{staticClass:"line-number"},[n._v("464")]),e("br"),e("span",{staticClass:"line-number"},[n._v("465")]),e("br"),e("span",{staticClass:"line-number"},[n._v("466")]),e("br"),e("span",{staticClass:"line-number"},[n._v("467")]),e("br"),e("span",{staticClass:"line-number"},[n._v("468")]),e("br"),e("span",{staticClass:"line-number"},[n._v("469")]),e("br"),e("span",{staticClass:"line-number"},[n._v("470")]),e("br"),e("span",{staticClass:"line-number"},[n._v("471")]),e("br"),e("span",{staticClass:"line-number"},[n._v("472")]),e("br"),e("span",{staticClass:"line-number"},[n._v("473")]),e("br"),e("span",{staticClass:"line-number"},[n._v("474")]),e("br"),e("span",{staticClass:"line-number"},[n._v("475")]),e("br"),e("span",{staticClass:"line-number"},[n._v("476")]),e("br"),e("span",{staticClass:"line-number"},[n._v("477")]),e("br"),e("span",{staticClass:"line-number"},[n._v("478")]),e("br"),e("span",{staticClass:"line-number"},[n._v("479")]),e("br"),e("span",{staticClass:"line-number"},[n._v("480")]),e("br"),e("span",{staticClass:"line-number"},[n._v("481")]),e("br"),e("span",{staticClass:"line-number"},[n._v("482")]),e("br"),e("span",{staticClass:"line-number"},[n._v("483")]),e("br"),e("span",{staticClass:"line-number"},[n._v("484")]),e("br"),e("span",{staticClass:"line-number"},[n._v("485")]),e("br"),e("span",{staticClass:"line-number"},[n._v("486")]),e("br"),e("span",{staticClass:"line-number"},[n._v("487")]),e("br"),e("span",{staticClass:"line-number"},[n._v("488")]),e("br"),e("span",{staticClass:"line-number"},[n._v("489")]),e("br"),e("span",{staticClass:"line-number"},[n._v("490")]),e("br"),e("span",{staticClass:"line-number"},[n._v("491")]),e("br"),e("span",{staticClass:"line-number"},[n._v("492")]),e("br"),e("span",{staticClass:"line-number"},[n._v("493")]),e("br"),e("span",{staticClass:"line-number"},[n._v("494")]),e("br"),e("span",{staticClass:"line-number"},[n._v("495")]),e("br"),e("span",{staticClass:"line-number"},[n._v("496")]),e("br"),e("span",{staticClass:"line-number"},[n._v("497")]),e("br"),e("span",{staticClass:"line-number"},[n._v("498")]),e("br"),e("span",{staticClass:"line-number"},[n._v("499")]),e("br"),e("span",{staticClass:"line-number"},[n._v("500")]),e("br"),e("span",{staticClass:"line-number"},[n._v("501")]),e("br"),e("span",{staticClass:"line-number"},[n._v("502")]),e("br"),e("span",{staticClass:"line-number"},[n._v("503")]),e("br"),e("span",{staticClass:"line-number"},[n._v("504")]),e("br"),e("span",{staticClass:"line-number"},[n._v("505")]),e("br"),e("span",{staticClass:"line-number"},[n._v("506")]),e("br"),e("span",{staticClass:"line-number"},[n._v("507")]),e("br"),e("span",{staticClass:"line-number"},[n._v("508")]),e("br"),e("span",{staticClass:"line-number"},[n._v("509")]),e("br"),e("span",{staticClass:"line-number"},[n._v("510")]),e("br"),e("span",{staticClass:"line-number"},[n._v("511")]),e("br"),e("span",{staticClass:"line-number"},[n._v("512")]),e("br"),e("span",{staticClass:"line-number"},[n._v("513")]),e("br"),e("span",{staticClass:"line-number"},[n._v("514")]),e("br"),e("span",{staticClass:"line-number"},[n._v("515")]),e("br"),e("span",{staticClass:"line-number"},[n._v("516")]),e("br"),e("span",{staticClass:"line-number"},[n._v("517")]),e("br"),e("span",{staticClass:"line-number"},[n._v("518")]),e("br"),e("span",{staticClass:"line-number"},[n._v("519")]),e("br"),e("span",{staticClass:"line-number"},[n._v("520")]),e("br"),e("span",{staticClass:"line-number"},[n._v("521")]),e("br"),e("span",{staticClass:"line-number"},[n._v("522")]),e("br"),e("span",{staticClass:"line-number"},[n._v("523")]),e("br"),e("span",{staticClass:"line-number"},[n._v("524")]),e("br"),e("span",{staticClass:"line-number"},[n._v("525")]),e("br"),e("span",{staticClass:"line-number"},[n._v("526")]),e("br"),e("span",{staticClass:"line-number"},[n._v("527")]),e("br"),e("span",{staticClass:"line-number"},[n._v("528")]),e("br"),e("span",{staticClass:"line-number"},[n._v("529")]),e("br"),e("span",{staticClass:"line-number"},[n._v("530")]),e("br"),e("span",{staticClass:"line-number"},[n._v("531")]),e("br"),e("span",{staticClass:"line-number"},[n._v("532")]),e("br"),e("span",{staticClass:"line-number"},[n._v("533")]),e("br"),e("span",{staticClass:"line-number"},[n._v("534")]),e("br"),e("span",{staticClass:"line-number"},[n._v("535")]),e("br"),e("span",{staticClass:"line-number"},[n._v("536")]),e("br"),e("span",{staticClass:"line-number"},[n._v("537")]),e("br"),e("span",{staticClass:"line-number"},[n._v("538")]),e("br"),e("span",{staticClass:"line-number"},[n._v("539")]),e("br"),e("span",{staticClass:"line-number"},[n._v("540")]),e("br"),e("span",{staticClass:"line-number"},[n._v("541")]),e("br"),e("span",{staticClass:"line-number"},[n._v("542")]),e("br"),e("span",{staticClass:"line-number"},[n._v("543")]),e("br"),e("span",{staticClass:"line-number"},[n._v("544")]),e("br"),e("span",{staticClass:"line-number"},[n._v("545")]),e("br"),e("span",{staticClass:"line-number"},[n._v("546")]),e("br"),e("span",{staticClass:"line-number"},[n._v("547")]),e("br"),e("span",{staticClass:"line-number"},[n._v("548")]),e("br"),e("span",{staticClass:"line-number"},[n._v("549")]),e("br"),e("span",{staticClass:"line-number"},[n._v("550")]),e("br"),e("span",{staticClass:"line-number"},[n._v("551")]),e("br"),e("span",{staticClass:"line-number"},[n._v("552")]),e("br"),e("span",{staticClass:"line-number"},[n._v("553")]),e("br"),e("span",{staticClass:"line-number"},[n._v("554")]),e("br"),e("span",{staticClass:"line-number"},[n._v("555")]),e("br"),e("span",{staticClass:"line-number"},[n._v("556")]),e("br"),e("span",{staticClass:"line-number"},[n._v("557")]),e("br"),e("span",{staticClass:"line-number"},[n._v("558")]),e("br"),e("span",{staticClass:"line-number"},[n._v("559")]),e("br"),e("span",{staticClass:"line-number"},[n._v("560")]),e("br"),e("span",{staticClass:"line-number"},[n._v("561")]),e("br"),e("span",{staticClass:"line-number"},[n._v("562")]),e("br"),e("span",{staticClass:"line-number"},[n._v("563")]),e("br"),e("span",{staticClass:"line-number"},[n._v("564")]),e("br"),e("span",{staticClass:"line-number"},[n._v("565")]),e("br"),e("span",{staticClass:"line-number"},[n._v("566")]),e("br"),e("span",{staticClass:"line-number"},[n._v("567")]),e("br"),e("span",{staticClass:"line-number"},[n._v("568")]),e("br"),e("span",{staticClass:"line-number"},[n._v("569")]),e("br"),e("span",{staticClass:"line-number"},[n._v("570")]),e("br"),e("span",{staticClass:"line-number"},[n._v("571")]),e("br"),e("span",{staticClass:"line-number"},[n._v("572")]),e("br"),e("span",{staticClass:"line-number"},[n._v("573")]),e("br"),e("span",{staticClass:"line-number"},[n._v("574")]),e("br"),e("span",{staticClass:"line-number"},[n._v("575")]),e("br"),e("span",{staticClass:"line-number"},[n._v("576")]),e("br"),e("span",{staticClass:"line-number"},[n._v("577")]),e("br"),e("span",{staticClass:"line-number"},[n._v("578")]),e("br"),e("span",{staticClass:"line-number"},[n._v("579")]),e("br"),e("span",{staticClass:"line-number"},[n._v("580")]),e("br")])]),e("blockquote",[e("p",[n._v('这里全部写在 .h文件的原因是使用了模板类，如果实现写在cpp文件中，使用的时候要加上#include "xxx.cpp"。因为模板类在使用的时候才知道具体要变成什么类型的函数。否则会报错')])]),n._v(" "),e("div",{staticClass:"language-c++ line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('void AVLTest()\n{\n    int arr[] = { 1,5,4,3,2,6 };\n    int i, ilen;\n    AVLTree<int>* tree = new AVLTree<int>();\n\n    cout << "== 依次添加: ";\n    ilen = sizeof(arr) / sizeof(int);\n    for (i = 0; i < ilen; i++)\n    {\n        cout << arr[i] << " ";\n        tree->insert(arr[i]);\n    }\n\n    cout << "\\n== 前序遍历: ";\n    tree->preOrder();\n\n    cout << "\\n== 中序遍历: ";\n    tree->inOrder();\n\n    cout << "\\n== 后序遍历: ";\n    tree->postOrder();\n    cout << endl;\n\n    cout << "== 高度: " << tree->height() << endl;\n    cout << "== 最小值: " << tree->minimum() << endl;\n    cout << "== 最大值: " << tree->maximum() << endl;\n    cout << "== 树的详细信息: " << endl;\n    tree->print();\n\n    i = 8;\n    cout << "\\n== 删除根节点: " << i;\n    tree->remove(i);\n\n    cout << "\\n== 高度: " << tree->height();\n    cout << "\\n== 中序遍历: ";\n    tree->inOrder();\n    cout << "\\n== 树的详细信息: " << endl;\n    tree->print();\n\n    // 销毁二叉树\n    tree->destroy();\n    delete tree;\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);